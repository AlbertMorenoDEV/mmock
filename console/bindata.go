// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xcd\x6e\xdb\x30\x10\x84\xcf\xe5\x53\x2c\x10\xf4\x12\x94\x8e\xed\x1a\x69\x21\x9d\xd2\x9f\xbc\x46\xc1\x9f\x95\x44\x68\xc5\x15\xd6\x54\xa5\x40\xf0\xbb\x17\x94\xe5\xaa\x40\xeb\x5e\xe7\x9b\x19\x2e\x86\x96\xfd\x1b\xcc\x0a\x00\x80\x42\x44\xdd\x60\xa8\x9b\x54\xc0\x61\xf7\x8c\x5d\x09\x4f\x8f\x50\x85\x09\x2a\x16\x48\x8d\x09\x50\x71\x4c\x8f\x4f\xea\xa2\x94\x6a\x52\x47\x1f\xe0\x8f\xfc\xef\xe8\x7e\xff\xbe\xcc\x96\x9d\xe3\x98\x4c\x88\x28\xba\xa2\x21\xf8\x59\xbd\xeb\x42\xd4\x7f\xfb\x7a\x13\x91\xf4\xad\xea\xc6\x3f\x1e\xf7\xfd\x54\x42\x76\x14\x85\x1e\xd1\xb6\x21\xe9\xb3\x13\x26\xb2\x46\xd6\x47\xc7\xe0\x53\x53\xc0\xe1\xd8\x4f\xb9\xeb\x1f\x46\x9d\xc4\xb8\x76\xb5\x5b\xe3\xda\x5a\x78\x88\x5e\x3b\x26\x96\x02\x1e\xbe\xbe\x7c\x3f\xbd\xbe\x94\x57\xcc\xe2\x51\x34\x61\x95\xef\xeb\x27\x38\x33\x05\x0f\x0f\xce\xb9\xbb\xed\xcd\xd0\xd9\xfb\xed\xa7\xe3\x67\xeb\xcc\x7f\xc3\x45\xc3\x3f\x51\xee\x57\x1c\xbe\x7d\x3a\x7d\x79\x5d\x96\x52\xbd\x60\xf6\xad\x13\x1d\x9e\xf3\x42\x0a\x20\x17\x54\xc4\x63\x61\x86\xc4\x59\xb8\xce\xb2\x2d\x7c\x46\x42\x97\xd0\xff\x10\x1e\x61\x5e\xbe\x51\x8f\xeb\xce\x96\xc9\x97\x17\xb5\x3b\x27\x09\xb1\x86\x19\xd6\x87\x6b\x41\x8c\x25\x5c\xd4\x2e\x0e\x9d\xcd\x17\xde\x88\x37\xd2\xb2\x98\x58\xe3\x82\x2d\x33\xa1\x89\x1b\xb7\x34\xe0\x1a\x24\xda\xe4\xce\xd4\x18\x93\x59\x48\x8b\x6f\x1b\x10\xf4\x59\xfc\x15\x00\x00\xff\xff\x43\xd7\x46\xd6\x8c\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 652, mode: os.FileMode(420), modTime: time.Unix(1479045927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x6d\x53\xdb\x3a\x16\xfe\x9c\xfc\x8a\x73\xb5\xbb\x33\x74\xba\xb6\x09\xb9\xb4\x5c\xb0\x33\x43\x81\xbb\x1d\x86\x14\xda\xb0\xb0\xf7\x7e\x93\xe5\x63\x5b\x89\x2c\x39\x92\x9c\x97\xee\xf4\xbf\xef\xc8\x76\xde\x20\xd0\x76\x76\x2e\x1f\x12\x5b\x3a\xe7\x79\xce\x73\x5e\x24\x12\xfe\x72\x79\x7b\x71\xff\xc7\xdd\x15\x7c\xbc\x1f\xde\x0c\xba\x61\x6e\x0b\xe1\xbe\x90\x26\x83\x6e\x27\x2c\xd0\x52\xc8\xad\x2d\x3d\x9c\x56\x7c\x16\x91\x0b\x25\x2d\x4a\xeb\xdd\x2f\x4b\x24\xc0\x9a\xb7\x88\x58\x5c\xd8\xc0\xf9\x9e\x01\xcb\xa9\x36\x68\xa3\x7f\xdf\xff\xee\x9d\x10\x08\x1c\x8c\xe5\x56\xe0\x60\x38\x54\x6c\x02\x17\x4a\x1a\x25\x10\x7a\x61\xd0\x2c\x77\xbb\x9d\xd0\x30\xcd\x4b\x0b\x46\xb3\x88\x04\x01\x53\x09\xfa\xe3\x69\x85\x7a\xe9\x33\x55\x04\xcd\xa3\xd7\xf3\x7b\x47\xfe\xa1\x5f\x70\xe9\x8f\x0d\x19\x84\x41\xe3\x35\xf8\x51\xff\x82\x67\x9a\x5a\xf4\x7a\xfe\x91\xdf\xdb\x03\xd3\xed\x84\xbf\x78\x1e\xdc\x50\x8b\xc6\x02\x53\x45\xc9\x05\x26\x40\x65\x02\x05\x97\x3c\xe5\x98\xc0\xc5\x68\x04\x9e\xe7\x28\x05\x97\x13\xd0\x28\x22\x62\xec\x52\xa0\xc9\x11\x2d\x81\x5c\x63\x1a\x11\x97\x31\x73\x1a\x04\x05\x5d\xb0\x44\xfa\xb1\x52\xd6\x58\x4d\x4b\xf7\xe2\x02\x5a\x2f\x04\x7d\xbf\xef\xbf\x0b\x98\x31\x9b\xb5\x3a\x32\x66\x0c\x01\x2e\x2d\x66\x9a\xdb\x65\x44\x4c\x4e\xfb\x27\xbf\x7a\xbd\xe9\x49\x71\x7f\x7d\x7b\x3e\x5a\x9c\x8c\x7b\xe7\xd5\x5b\x7a\xfc\x78\xf9\x20\xef\xf8\x91\x98\xfc\x9e\xce\xe7\x57\xe7\xf4\x24\xbf\xbc\x4c\xc6\x7f\x8a\xf2\x06\xb3\x45\x3e\x7e\x18\x5e\xf5\xd2\x6c\xfc\x78\xf7\xaf\x62\xf2\xd5\xbc\x27\xc0\xb4\x32\x46\x69\x9e\x71\x19\x11\x2a\x95\x5c\x16\xaa\x32\x64\xad\xfe\xb6\xb4\x5c\x49\x2a\xc0\xe6\x58\xe0\x5f\xad\xd5\xab\x59\x5e\x53\x9c\xde\x3c\x1e\x7d\x3a\xec\x89\xe1\x74\x4c\x27\x1f\x26\x8b\xbe\x08\x86\xbf\x5d\xd1\xbc\x9a\x97\xa3\x14\x3f\xcd\x1e\xde\xf5\xaf\x8f\xf1\xab\xec\x57\x7f\x7e\xa5\xe5\xfd\x61\xf5\xfe\xea\x0f\xf3\x9f\xe1\xf8\xf3\xc3\xdb\xc3\x2b\x79\xac\xbf\xaf\xf8\xd5\x7a\x5f\xd3\x19\x1d\x35\xcd\xd5\xa4\x62\xbb\xd3\x7e\x56\xfa\xf8\x69\x95\xc7\x7b\x25\x1f\x16\xa3\xf8\xfa\xf2\xea\x23\xa7\x22\x2d\xaa\x0f\x1f\x3e\xdf\xbd\x3b\xff\xf5\xb3\x2e\xf5\xf4\xf8\xf6\x21\x7d\xec\xbf\xbf\xfb\xf2\xa5\x3f\x3e\xbe\xba\x99\x2e\x8c\xe9\x2d\x1f\xa6\xb7\x56\x62\x29\x3f\x3e\xdc\xfd\x46\xaf\xdf\x2f\x46\x2f\x4b\xde\xe9\xf5\x56\x89\x5d\x96\xd8\x0e\xf0\x46\x2c\x69\x04\x8e\x4d\xeb\xf0\x7c\x52\xf6\xb7\xc4\x16\x58\x5d\xcf\xa6\x45\x5c\xc9\x6b\xab\xba\xc8\xeb\x73\x45\xd2\x02\x23\x32\xe3\x38\x2f\x95\xb6\x5b\xa7\xc9\x9c\x27\x36\x8f\x12\x9c\x71\x86\x5e\xfd\xf2\x4f\xe0\x92\x5b\x4e\x85\x67\x18\x15\x18\xf5\x1c\xca\x77\x24\x0c\xba\x9d\xbf\x1f\x40\xa2\x58\x55\xa0\xb4\xf0\xc6\xd7\x48\x93\xe5\x41\x5a\x49\xe6\x5a\xfc\xe0\x0d\xfc\xb7\xdb\xe9\x00\xcc\xa8\x86\xb9\x81\x08\x24\xce\xe1\x11\xe3\x91\x62\x13\xb4\x07\x64\xee\x4a\x4b\xe0\x2d\x08\xc5\xa8\xf3\xf0\x73\x65\x2c\xbc\x05\x12\x20\xcb\x15\x79\x73\x56\xbb\xcf\x8d\xaf\x64\x81\xc6\xd0\x0c\x21\x82\x35\x3c\xae\xf0\x5b\x8a\x8d\xc9\xf5\xe8\xf6\x93\x5f\xba\x53\xf2\x00\x67\x28\xad\x9f\x50\x4b\x5b\xb4\x0e\x80\x50\xd9\x17\x9c\x56\x68\xec\x41\xeb\xf3\xe6\xcc\x6d\xb9\xbf\xda\xe6\xdb\x59\xb7\xf3\xad\xb6\xdf\x54\x24\x0c\x9a\x23\xbb\xdb\x0d\x63\x95\x2c\x07\x6d\x6f\x8f\x2c\x65\x13\x37\xca\xc0\x94\xa8\x0a\x69\x40\x49\x28\x54\xcc\x05\x42\xbc\x84\x82\x4e\xb8\xcc\x40\x49\x84\xb4\x12\xa2\xc9\x75\x3d\x00\xce\x45\xd9\x1c\x35\xe4\x54\xa4\xed\x46\x33\x01\x09\x9f\x01\x13\xd4\x98\x88\xb8\x8a\x51\x2e\x51\x7b\xa9\xa8\x78\xb2\xaa\x20\x81\xba\xda\x11\x29\x69\x92\x70\x99\x9d\x42\xef\xb8\x5c\x9c\x35\x35\xdb\x72\xd7\x6a\x5e\xaf\x3d\xc1\x14\x5e\x91\x78\xbd\x23\x17\xb2\x27\xb2\xe6\xa9\xbe\x33\x1a\xe3\x1d\xeb\x92\x4a\x14\x50\x7f\x7a\xa5\xe6\x05\xd5\x4b\x02\x8d\xd9\x73\x3b\xcf\xe5\x88\xcb\xac\xc5\xe9\x74\xc2\xbc\xbf\x6b\x50\xdf\x48\x64\xf7\xa6\x0a\x83\xbc\xbf\x42\x0c\x12\x3e\x7b\x11\xdd\x25\x7e\x2d\x5d\xcd\x50\xa7\x42\xcd\x4f\x69\x65\xd5\x9a\xb0\xfd\xea\x84\x95\x58\xf9\x0a\x6e\xac\x97\x69\x55\x95\x04\x78\x12\x91\xfa\xf1\x62\x47\xf0\x8e\x67\x50\x89\x5d\xb4\xd7\x83\x4a\x95\xb2\xa8\x37\x8a\x05\x8d\x51\x3c\xa9\x8f\x67\x55\x79\x0a\xbd\x7f\x9c\x6d\xf8\x42\x2e\xcb\x6a\x35\x59\x2c\x47\x36\x89\xd5\xa2\x09\x90\xe5\x93\xf3\xca\xaa\x11\xd3\x4a\x08\x02\xf5\x26\x26\x11\xb1\xba\x42\x02\x03\x70\x9b\x60\xea\xdd\x15\x69\x50\xb3\xae\x63\x88\x2b\x6b\x95\x6c\xc1\x9b\x17\xb2\x8a\x3a\xb6\x12\x62\x2b\x37\xc5\xb4\x34\xe6\x32\xc1\x45\x44\x0e\x1b\xfe\xd8\xca\x0b\x81\x54\xdf\xa8\x6c\x9d\xed\x54\x28\x6a\x4f\x35\xcf\x72\xbb\x11\x11\x9a\x92\xca\x15\x6e\x26\x96\x65\xce\x99\x92\xb0\x7e\xf2\x34\x16\x6a\x86\x9e\xe1\x99\xac\x4f\xb7\x92\xca\x01\xd4\xd8\x9b\xda\x37\xe1\x3d\xaf\xff\xe6\xb1\x79\xea\x74\xb7\xd6\xbe\xdb\xe4\x54\xa0\xb6\x50\x7f\x7a\x5c\xa6\x6a\x2d\x24\xe1\xa6\x14\x74\x79\x2a\x95\xc4\x46\x6e\x6d\x34\x44\x63\x50\x66\x48\x06\x8f\x28\x98\x2a\xd0\xdf\x70\xbd\x44\x0a\x3f\x34\x5a\xc6\x52\x5b\xdf\x86\x3f\x32\x59\xff\xf7\x60\x7d\xbc\xbf\xbf\x83\x4b\xb4\x94\x0b\xf3\x73\x73\xe5\x2e\x9d\xcd\xbe\x4b\x8c\xe5\x1a\x19\x2d\x5f\x48\xdd\x9e\x44\x9b\x8a\x31\x74\xb7\xd2\x2a\x4a\x80\xd0\x58\xad\x64\x36\x68\x5a\xa5\x41\x5d\x65\x04\xda\x8e\x08\x83\xd6\x08\xb6\xad\x74\x73\x44\x6f\xcc\xd6\xbd\xbe\x91\xb2\x1a\xda\xad\x69\x97\x74\x06\x92\xce\x3c\x4b\x63\x43\xb6\xe2\x10\x7c\x1d\x31\xb3\x7c\xe6\x06\x29\xa4\xed\xf5\xf9\x37\x4b\xe3\x15\x1d\xb8\xbb\xc2\xb3\x2a\xcb\x9c\x64\x4b\x63\x32\x68\x2f\x8b\x30\xa0\x83\x30\x10\x7c\x07\xf4\x29\x88\x29\x95\x34\xb8\x1f\xa5\xd9\x7b\x0a\xd3\x79\x86\x72\x3e\xfc\x7c\xb7\x0f\xc1\xad\xff\x40\x10\xc2\x8d\xed\x73\xef\x1b\x95\x3d\x75\x6e\x8e\xba\x9d\xba\xb7\x39\xb2\x34\xf6\x56\x77\xcd\x16\xd5\xba\x33\xb6\xf2\xb5\xe5\xe1\xba\x09\x52\x9a\x20\x70\x09\x6d\x9a\x37\xde\x00\x61\xa9\xb1\xf6\xcf\x93\x75\x75\xc3\xa0\xd4\xb8\x45\xb1\x5d\xdd\xa7\x8c\xab\xe4\xee\xa3\x7c\x99\xa8\xf5\x7a\x95\xa9\xb3\x4d\xd4\xe4\xff\x67\x48\x6a\x8f\xbd\x04\xb0\x5f\x4b\x5d\xa3\x9f\x61\x70\x0e\xaf\x13\xec\x99\x8b\x76\x69\xef\x71\xda\xdd\x3a\xd9\x56\x2b\xdd\x6e\x18\x34\xff\xdc\x84\x41\xf3\x3b\xf5\x7f\x01\x00\x00\xff\xff\xd6\x82\x4e\x47\xbf\x0e\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 3775, mode: os.FileMode(420), modTime: time.Unix(1479053191, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x57\xdd\x72\xdb\x36\x13\xbd\xd7\x53\x60\xf0\x79\x42\x30\xb2\x68\xe5\x1b\xf7\xa2\x92\x65\x37\x75\xda\x49\x3a\x49\xd3\xc6\xb9\x69\x45\xa5\x03\x13\x2b\x0a\x35\x08\x28\x00\x18\x55\x89\xfc\xee\x1d\x10\xa4\x04\x52\x3f\x49\x2f\xf2\x63\xec\x39\x8b\xc5\xee\xc1\x21\xfc\x89\x6a\x94\xa9\x52\x5a\x34\x41\xc3\x71\xcf\xfd\xa8\xe1\x63\x09\xc6\x1a\x34\x41\xd3\xd9\xb8\xd7\x3b\x23\x4c\x65\x65\x01\xd2\xc6\x89\x06\xca\xd6\x64\x5e\xca\xcc\x72\x25\x49\x8c\xbe\xf4\x10\x42\xe8\x8c\xe0\xff\xdd\x5b\x79\x2b\x80\xea\xd7\x2a\xc7\x71\x92\x09\x9e\x3d\xec\x03\x1b\x70\xae\x55\xb9\xbc\x55\xd2\x28\x01\x38\x4e\xa0\x58\xda\x35\x89\xc7\x2d\x8c\xe5\x1a\x32\xba\xc4\x71\xb2\xe0\x0c\xba\xd1\x05\xab\xeb\x74\x71\x5b\x08\x82\xf1\x01\x84\x59\x2a\x69\xe0\x04\xe4\xf9\x9b\xdf\x7f\x3b\x11\x16\xd5\x61\xda\xd1\xc7\x78\xdc\x73\x7f\x7a\xcd\xe9\x10\x97\x99\x06\xd7\xa0\x5b\xd7\xc9\xed\x61\x35\xd8\x52\x4b\xdf\xde\x7e\x7f\xdc\x7b\x0c\x28\x66\xa1\x56\x2f\xc0\x52\x2e\x0c\xe1\xac\x61\x18\xb0\xef\xd4\xea\x0e\x04\x64\x16\x98\x0b\xf8\x2d\x85\xca\x1b\x70\x33\x9d\x29\x67\xb3\xb8\x93\x73\x8f\xed\xd3\x9e\x11\x9c\x08\x6e\xec\xa0\xea\xfa\x80\x5b\x28\xb0\x1b\x65\xa1\x3e\xc1\xad\xa0\xc6\x90\xc8\xd4\xa4\xbf\xb4\x5a\x45\x7e\x53\xd7\x00\xad\x56\x83\x7a\xc3\x01\xee\x73\x16\x27\x94\xb1\x23\x94\xb0\x92\x1c\xec\xad\x12\x4a\xff\xb8\xbe\xb3\xd4\x96\x86\x98\xea\x9f\x5b\xc5\xc0\xd5\x54\x9d\x89\xcf\x51\xb0\x8c\x26\x13\xf4\xff\xe1\x10\x6d\x36\xa8\xbb\xf8\x2c\x14\x4f\xdd\x53\x6c\xca\x2c\x03\x63\x70\x3d\x12\x04\xc2\xc0\x81\x94\x97\xc3\xcb\x43\x6c\x46\x65\x0e\xba\x4d\xde\x47\xad\xa8\x96\x5c\xe6\x0d\xac\x75\xc2\x60\x22\x7f\x1b\x25\xc3\x8b\xb0\xd3\xed\x9c\x32\x78\x5b\x5a\xf2\x6c\x38\xac\x07\x19\xdc\x2f\x34\x41\xbf\xdc\xbd\xfd\x35\x31\x56\x73\x99\xf3\xf9\xba\x4a\x94\xd4\xd1\x73\x54\x4a\x06\x73\x2e\x81\x9d\xa3\xcb\x16\xdb\x6b\xfa\x28\xdd\x87\x8f\xf2\x69\xf1\x71\x79\x84\xeb\x42\x47\x79\x42\xe5\xc7\xb7\x2c\xc5\xf1\x82\xfd\x40\xd0\x04\xb5\xea\x4b\x76\x73\x1a\x1f\xe8\x1c\xb5\x56\x93\x28\x73\x4a\x8b\xce\x51\x44\x05\x68\x8b\xaa\xbf\x07\x11\xea\x1f\xd3\x57\x1c\x1f\xca\xe5\xa6\xf0\x4a\x06\x43\xf0\x61\x4f\x69\x6e\x77\x9d\xa0\xcd\x6f\xf9\x4b\x38\x9d\xa4\x00\xbb\x50\x0c\xf5\x11\x46\x18\xf5\x51\x2b\xb6\xa4\x76\x11\x24\xda\x33\x2a\xb3\x96\x96\xfe\xf3\x92\xe7\x0b\xc1\xf3\x85\x6d\x6e\x74\xdc\xe1\xb4\xad\x6b\x9f\xe4\xe3\x6d\x56\xe8\x66\x5d\x86\x9b\x6e\x1b\x1d\x98\x5b\x17\x2c\x54\x1e\xfb\x3b\xdd\x92\xfc\x3b\x5f\x6a\x4b\xf2\xff\x61\xc6\x0e\xca\x19\x9a\xec\x19\xe6\x2e\xcc\xa8\x05\xcb\x0b\x27\x6f\x37\xe4\x52\x6b\x90\xf6\x3d\x2f\x20\x04\xcd\x4b\x21\x5e\x57\x7a\xdc\xc2\xdd\x24\xae\x06\xfb\xc3\xf8\xda\xa0\xc6\xb5\x53\xef\x4c\xb5\x3e\xc5\xae\x51\x9d\x6f\x15\x5d\x2e\x41\x32\x12\x5d\x09\x8e\x38\x9b\xe0\xd0\x23\x9d\x36\xb9\xdb\x2d\xc2\xa8\x12\xef\x04\x77\x8c\x17\x75\x7e\x3e\x29\x67\x9f\x48\xc9\xea\x63\x3a\xc1\xe1\x37\x63\xb7\x53\x3c\xae\xfd\x6a\x4e\x85\x01\x7c\xed\x22\x4d\x83\xfa\x28\xba\xba\x10\xfc\xba\xb6\xf4\xee\x57\xa7\x5a\xcb\xdc\x47\xfb\xad\x60\xaf\x55\x6e\x9a\x26\x9b\x4c\xab\x2a\x83\x79\xa1\x56\x92\x74\x95\xd0\xa6\x04\x3a\x10\x2a\x7f\x65\xa1\xb8\xe3\x9f\xdd\x00\xbb\xcd\x43\x82\xe3\x38\x31\xfc\xf3\x76\x98\xce\xb0\x43\xce\x35\xfa\x6e\xd8\x7e\x2a\x44\xdd\x0c\xa3\x39\xd7\xc6\x46\xcd\xf7\xab\xc9\xd4\x76\xe7\x6e\xfd\x75\x4a\xb7\x9d\x2b\x2a\x5b\x3c\x3c\x2f\xad\xba\xab\x50\x38\x4e\xb8\x21\xd1\x28\x5b\x40\xf6\x00\x2c\x8a\xbf\xf2\x56\xf1\xb9\xdf\xab\x25\x39\x10\xcc\xc1\x92\x61\x83\x79\x09\xee\x2e\x1d\x2c\xb0\xab\xed\xa0\x87\x99\x5f\x77\xca\x46\x13\x24\x61\x85\x5e\x50\x0b\x47\xee\x48\x00\x76\x7b\x7b\xa4\x53\xfb\x05\x46\xfd\xed\x29\x48\x07\xf6\x46\x49\xbb\xa8\x70\xcf\xf6\xc1\x1d\xec\xcf\xa5\x10\x7f\x00\xd5\x3e\x2d\xfa\x01\x9d\xc0\xbe\x54\xa5\x36\x1e\x38\x3a\x01\x7b\xc3\x65\x69\xe1\x1b\x80\x77\x90\x29\xc9\xb6\xaa\xac\x75\xde\x1c\xbf\xf3\xf8\xe9\x38\x58\x68\x51\xee\xff\x3b\x73\x5a\x0a\x9a\x01\xb9\x78\x72\x91\x9f\xa3\xe8\x09\x2d\x96\xe3\x4a\x4d\xf5\xf2\x95\x5f\x16\xb6\xb5\x7a\xed\x57\x73\xb7\xda\x2a\xa6\x9d\x93\x60\x92\xa6\xe5\x94\x0e\x3e\x3f\x1f\xfc\x39\x1c\x7c\x3f\xfb\x72\xf9\xb8\x49\xd3\xe9\x87\x72\xb6\x99\x7e\x48\x53\x3c\x8b\x9f\x62\x92\x9a\xa7\xa3\xf8\x66\x93\xde\x13\xab\x4b\xd8\x54\xf7\x76\x23\x4b\x21\xe2\xf4\x7e\x33\xb8\x49\x59\x9f\xdc\x8c\xd2\x24\x65\x4f\xe3\x1b\x72\x33\x9a\xc2\x4f\xb3\x69\x3f\x1d\xcc\x5c\x24\xbe\x89\x5d\x29\xdb\x87\x75\x41\x6d\xb6\x08\x15\x5b\x49\x48\x38\x2f\x8e\x64\x59\xdc\x83\x8e\x76\x6f\x5a\xa7\xff\x8b\x0f\xf8\x22\xb1\xce\xc4\x3d\x35\xe4\x6e\x31\xa3\xb3\x93\x18\x6f\x1b\xd5\x1e\x0f\xb0\x0e\x36\x38\xf8\x9c\xea\x30\xfc\xeb\xa1\x4b\xea\x75\xe8\x55\x19\xbb\xf6\x9c\x2c\xa7\x4e\x7c\xaf\x94\x00\x2a\x83\xcc\x61\x2e\xd7\xdf\x6f\xc9\xe2\x70\x61\x8a\xee\xab\x30\xba\x32\x4b\x2a\x1b\x77\x77\x66\xeb\x88\xce\xa8\x2b\xe7\xad\x72\x7b\xdf\x75\xb8\xeb\x28\xf8\x9d\xe1\xdf\x00\x00\x00\xff\xff\xeb\xe7\xb2\x4e\x6c\x0d\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 3436, mode: os.FileMode(420), modTime: time.Unix(1479053961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html":    tmplIndexHtml,
	"tmpl/js/script.js":  tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

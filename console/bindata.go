// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xdd\x6a\xdc\x40\x0c\x85\xaf\xbb\xe0\x77\x10\x84\xde\x84\x4e\x62\x6f\x97\xb4\xd8\x57\xe9\x4f\x5e\xa3\xcc\x8f\x6c\x0f\x96\x47\x46\x3b\xae\x1d\x4c\xde\xbd\xf8\x6f\xb7\x85\xb0\x65\xee\x74\x3e\x9d\x39\x1c\x19\x76\xaf\x30\x25\x07\x00\x00\xf2\x01\x55\x8d\xbe\xaa\x63\x0e\xd9\xc3\x13\xb6\x05\x3c\xde\x43\xe9\x47\x28\x59\x20\xd6\xda\x43\xc9\x21\xde\x3f\x26\x87\xb7\xe4\x30\xbf\x3a\xb6\xf4\x09\xfe\x36\xb9\xec\xa7\xe9\xc7\x62\xe3\x1e\x2c\x87\xa8\x7d\x40\x51\x25\xf5\xde\x4d\xc9\xe1\x43\xeb\x83\x7a\x97\xed\x74\x40\x52\x17\xcb\x9d\xf9\x7c\x4c\xbb\xb1\x80\x8d\xca\x73\x35\xa0\x69\x7c\x54\x67\x2b\x4c\x64\xb4\xec\x01\x06\xef\x62\x9d\x43\x76\xec\xc6\xd5\xf3\x1d\x56\x45\xd1\xb6\xd9\x37\x8c\xb6\x4d\x25\xdc\x07\xa7\x2c\x13\x4b\x0e\x77\xdf\x9f\x7f\x9e\x5e\x9e\x8b\x4d\x67\x71\x28\x8a\xb0\x9c\xb3\x76\x23\x9c\x99\xbc\x83\x3b\x6b\xed\x8d\x1f\xea\xbe\x35\x37\x7e\x38\x1d\xbf\x1a\xab\xff\xb3\x9f\xd7\xfc\x1b\xe5\x86\x4b\xf6\xe3\xcb\xe9\xdb\x4b\x71\xb9\x47\x27\xb8\xc0\x5b\x6b\xd9\x53\xba\xb4\x00\x30\xfb\x94\xc4\x43\xae\xfb\xc8\xcb\x64\xed\xe9\x9f\xea\xcf\x48\x68\x23\xba\x5f\xc2\x03\x4c\xcb\xad\xd5\xb0\xf5\x6f\x98\x5c\xf1\x36\x43\x51\x7c\xa8\x60\x82\x2d\x43\x25\x88\xa1\x80\x59\x0a\x7d\x6b\xe6\xb8\xbb\xe4\xb4\x34\x2c\x3a\x54\xb8\xea\x86\x99\x50\x87\x2b\x60\xa8\xc7\x7d\x95\xe8\x3a\x6f\x75\x85\x21\xea\x55\x6a\xf0\xf5\xaa\x08\xba\x65\xfa\x27\x00\x00\xff\xff\xc1\x41\x24\x42\xb8\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 696, mode: os.FileMode(438), modTime: time.Unix(1478706022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x6d\x4f\xe3\x3a\x16\xfe\xcc\x48\xf3\x1f\xce\xf5\xee\x4a\x8c\x66\x93\x50\x7a\x99\xe1\x42\x52\x89\x01\xee\x8e\x10\x0c\xcc\x94\x85\xbd\xf7\x9b\xe3\x9c\x24\x6e\x1d\x3b\xb5\x9d\xbe\xcc\x6a\xfe\xfb\xca\x49\xda\x86\x52\x06\x90\xf6\x82\xd4\x3a\xf6\x39\xcf\x73\x5e\x7d\xd2\xf0\x97\xb3\xeb\xd3\xdb\x3f\x6e\xce\xe1\xf3\xed\xd5\xe5\xe0\xed\x9b\x30\xb7\x85\xa8\xbf\x91\x26\x83\xb7\x6f\x76\xc2\x02\x2d\x85\xdc\xda\xd2\xc3\x49\xc5\xa7\x11\x39\x55\xd2\xa2\xb4\xde\xed\xa2\x44\x02\xac\x79\x8a\x88\xc5\xb9\x0d\x9c\xf6\x31\xb0\x9c\x6a\x83\x36\xfa\xf7\xed\xef\xde\x21\x81\xa0\xc6\xb1\xdc\x0a\x1c\x5c\x5d\x29\x36\x86\x53\x25\x8d\x12\x18\x06\xcd\xe6\xdb\x37\x4e\xc0\x30\xcd\x4b\x0b\x46\xb3\x88\x04\x01\x53\x09\xfa\xa3\x49\x85\x7a\xe1\x33\x55\x04\xcd\xd2\xeb\xf9\xbd\x7d\x7f\xcf\x2f\xb8\xf4\x47\x86\x0c\xc2\xa0\xd1\x1a\xbc\x18\xa0\xe0\x99\xa6\x16\xbd\x9e\xbf\xef\xf7\xb6\xe1\x38\xa4\x5f\x3c\x0f\x2e\xa9\x45\x63\x81\xa9\xa2\xe4\x02\x13\xa0\x32\x81\x82\x4b\x9e\x72\x4c\xe0\x74\x38\x04\xcf\xab\x59\x05\x97\x63\xd0\x28\x22\x62\xec\x42\xa0\xc9\x11\x2d\x81\x5c\x63\x1a\x11\x17\x36\x73\x14\x04\x05\x9d\xb3\x44\xfa\xb1\x52\xd6\x58\x4d\x4b\xf7\xe0\x6c\x5a\x6d\x04\x7d\xbf\xef\x7f\x08\x98\x31\xeb\xbd\xda\x38\x66\x0c\x01\x2e\x2d\x66\x9a\xdb\x45\x44\x4c\x4e\xfb\x87\xbf\x7a\xbd\xc9\x61\x71\x7b\x71\x7d\x32\x9c\x1f\x8e\x7a\x27\xd5\x7b\x7a\x70\x7f\x76\x27\x6f\xf8\xbe\x18\xff\x9e\xce\x66\xe7\x27\xf4\x30\x3f\x3b\x4b\x46\x7f\x8a\xf2\x12\xb3\x79\x3e\xba\xbb\x3a\xef\xa5\xd9\xe8\xfe\xe6\x5f\xc5\xf8\xbb\xf9\x48\x80\x69\x65\x8c\xd2\x3c\xe3\x32\x22\x54\x2a\xb9\x28\x54\x65\x48\x27\x00\xd7\xa5\xe5\x4a\x52\x01\x36\xc7\x02\xff\x72\x77\xbd\x9a\xe6\x67\x4e\xa7\x97\xf7\xfb\x5f\xf6\x7a\xe2\x6a\x32\xa2\xe3\x4f\xe3\x79\x5f\x04\x57\xbf\x9d\xd3\xbc\x9a\x95\xc3\x14\xbf\x4c\xef\x3e\xf4\x2f\x0e\xf0\xbb\xec\x57\x7f\x7e\xa7\xe5\xed\x5e\xf5\xf1\xfc\x0f\xf3\x9f\xab\xd1\xd7\xbb\xf7\x7b\xe7\xf2\x40\xbf\xc4\xe9\x9f\x66\xfd\x82\x4e\xe9\xb0\x29\xb2\x36\x1a\xdd\x92\x7b\xad\xf7\xa3\xcd\x5c\x8f\xb6\x7a\xbd\x57\x0c\xe3\x8b\xb3\xf3\xcf\x9c\x8a\xb4\xa8\x3e\x7d\xfa\x7a\xf3\xe1\xe4\xd7\xaf\xba\xd4\x93\x83\xeb\xbb\xf4\xbe\xff\xf1\xe6\xdb\xb7\xfe\xe8\xe0\xfc\x72\x32\x37\xa6\xb7\xb8\x9b\x5c\x5b\x89\xa5\xfc\x7c\x77\xf3\x1b\xbd\xf8\x38\x1f\x3e\xed\xf5\x46\xd1\xb7\xbe\xd8\x45\x89\x6d\x37\xaf\xfd\x25\x8d\x8b\x23\xd3\xaa\x6c\x6b\x9a\xed\x95\xd1\x81\xab\xd3\xda\x54\x8a\xcb\x7c\x2d\x55\xe7\x7a\x7d\xcf\x48\x5a\x60\x44\xa6\x1c\x67\xa5\xd2\xb6\x73\xbb\xcc\x78\x62\xf3\x28\xc1\x29\x67\xe8\xd5\x0f\xff\x04\x2e\xb9\xe5\x54\x78\x86\x51\x81\x51\xaf\x86\x79\xc6\x0d\x27\xf2\xf7\x5d\x48\x14\xab\x0a\x94\x16\xde\xf9\x1a\x69\xb2\xd8\x4d\x2b\xc9\x5c\xb5\xef\xbe\x83\xff\x3a\x14\x80\x29\xd5\x30\x33\x10\x81\xc4\x19\xdc\x63\x3c\x54\x6c\x8c\x76\x97\xcc\x5c\x8a\x09\xbc\x07\xa1\x18\x75\x2a\x7e\xae\x8c\x85\xf7\x40\x02\x64\xb9\x22\xef\x8e\x1b\xfd\x99\xf1\x95\x2c\xd0\x18\x9a\x21\x44\xb0\x22\xc0\x15\x43\x4b\xb2\x96\xb9\x18\x5e\x7f\xf1\x4b\x77\x75\xee\xe2\x14\xa5\xf5\x13\x6a\xe9\x12\x6f\x07\x40\xa8\xec\x1b\x4e\x2a\x34\x76\xb7\x55\x7a\x77\xec\x8e\xdc\x5f\x23\xf4\xc3\x09\xff\x68\x54\x3a\xd9\x09\x83\xf6\x36\x77\xff\x61\xac\x92\xc5\x60\x59\xef\x43\x4b\xd9\xd8\x75\x38\x30\x25\xaa\x42\x1a\x50\x12\x0a\x15\x73\x81\x10\x2f\xa0\xa0\x63\x2e\x33\x50\x12\x21\xad\x84\x68\x22\x5f\x37\x85\x53\x51\x36\x47\x0d\x39\x15\x69\x7b\xd0\x76\x45\xc2\xa7\xc0\x04\x35\x26\x22\x2e\x81\x94\x4b\xd4\x5e\x2a\x2a\x9e\x2c\x13\x4a\xa0\xce\x7e\x44\x4a\x9a\x24\x5c\x66\x47\xd0\x3b\x28\xe7\xc7\x6d\x0a\x3b\xfa\x5a\xcd\x9a\xcd\x0d\x54\xe1\x15\x89\xd7\xdb\x77\x56\x7b\x22\x6b\x56\xf5\x4c\x69\xa5\x1f\x88\x97\x54\xa2\x80\xfa\xd3\x2b\x35\x2f\xa8\x5e\x10\x68\xe5\x1e\x0b\x7a\x2e\x58\x5c\x66\x4b\xa4\x9d\x9d\x30\xef\x3f\x94\xa8\xc7\x16\xd9\x1c\x66\x79\x7f\x85\x19\x24\x7c\xfa\x34\x81\xcb\xc0\x2a\x02\x6a\x8a\x3a\x15\x6a\x76\x44\x2b\xab\xd6\x9c\xcb\xef\x9d\xb0\x12\x4b\x6d\xc1\x8d\xf5\x32\xad\xaa\x92\x00\x4f\x22\x52\x2f\x4f\x1f\xfa\xfd\x50\x37\xa8\xc4\x26\xe2\x33\xb6\xa5\x4a\x59\xd4\x1d\xdf\x05\x8d\x51\x6c\xa4\xcb\xb3\xaa\x3c\x82\xde\x3f\x8e\x3b\xac\x21\x97\x65\xb5\xec\x3b\x96\x23\x1b\xc7\x6a\xde\xd8\xc9\xf2\xf1\x49\x65\xd5\x90\x69\x25\x04\x81\xfa\x10\x93\x88\x58\x5d\x21\x81\x01\xb8\x43\x30\xf5\xe9\x8a\x36\xa8\x79\xd7\x66\xc4\x95\xb5\x4a\xb6\xf0\xcd\x03\x59\x5a\x1e\x5b\x09\xb1\x95\xeb\xdc\x5a\x1a\x73\x99\xe0\x3c\x22\x7b\x8d\x05\xb1\x95\xa7\x02\xa9\xbe\x54\xd9\x2a\xf0\xa9\x50\xd4\x1e\x69\x9e\xe5\xb6\xe3\x47\x68\x4a\x2a\x97\xc0\x99\x58\x94\x39\x67\x4a\xc2\x6a\xe5\x69\x2c\xd4\x14\x3d\xc3\x33\x59\x5f\x81\x25\x95\x03\xa8\xc1\xd7\x95\xd0\xd8\xb7\xad\x1a\x3a\xeb\x66\xb9\xd3\xf4\xea\x72\xf7\xf9\xda\xa7\x02\xb5\x85\xfa\xd3\xe3\x32\x55\x2b\x7f\x12\x6e\x4a\x41\x17\x47\x52\x49\x6c\xbc\xae\x85\xae\xd0\x18\x94\x19\x92\xc1\x3d\x0a\xa6\x0a\xf4\x3b\x6c\x4f\xf2\xc2\xcb\x9a\xce\x58\x6a\x9b\x01\xfa\x92\x9e\xfb\x3f\xb4\xdc\xe7\xdb\xdb\x1b\x38\x43\x4b\xb9\x30\xaf\xed\xb8\x66\x4e\xad\x25\x5c\x88\x2c\xd7\xc8\x68\xf9\x44\x10\xb7\x84\xdc\x54\x8c\xa1\x1b\x64\x2b\x53\x01\x42\x63\xb5\x92\xd9\xa0\xa9\x9d\x06\x76\x19\x19\x68\x4b\x24\x0c\x5a\x21\xe8\x4a\xe9\xe6\x3e\x5f\x8b\xad\xeb\xbf\xe3\xcf\xaa\xa1\x3b\x77\x81\xa4\x53\x90\x74\xea\x59\x1a\x1b\xd2\xb5\x45\xf0\x95\xd9\xcc\xf2\xa9\x6b\xb0\x90\xb6\x63\xf7\x6f\x96\xc6\x4b\x4a\x70\xd3\xc5\xb3\x2a\xcb\x9c\xdf\x96\xc6\x64\xd0\x4e\x97\x30\xa0\x83\x30\x10\xfc\x21\xea\x26\x8a\x29\x95\x34\xb8\x1d\xa6\x39\x7b\x84\xb3\xf3\x08\xa6\x44\x6d\xf8\x76\x63\x6e\x9a\xa3\x97\x18\x23\x5c\x57\x3f\x46\xb8\x54\xd9\x23\xed\xf6\x46\xdc\xa8\x84\x36\x60\x96\xc6\xde\x72\x40\x75\xf9\x56\xc5\xd2\x89\x5e\x47\xc5\x95\x18\xa4\x34\x41\xe0\x12\xda\xa0\x77\xd4\x01\xc2\x52\x63\x0d\x90\x27\xab\x84\x87\x41\xa9\xb1\x4b\xf2\x20\xe1\x9b\xa4\xcb\x60\x6f\x63\xfd\x09\x57\xab\xf6\x0c\xd9\x4e\x97\x6b\x95\x91\x57\x51\x2d\xb5\xb6\x33\xc1\x13\x7e\xd5\x79\x7b\x15\x8f\xd3\x78\x8e\x63\x6b\xeb\x2c\x37\x9f\xb8\x85\x9b\x83\xd5\xf6\x7a\xb3\x7e\x63\x0a\xda\x57\xa6\x30\x68\x7f\x1d\xff\x2f\x00\x00\xff\xff\x07\xd8\xbd\x2e\x37\x0f\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 3895, mode: os.FileMode(438), modTime: time.Unix(1479117097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x57\xdd\x72\xdb\x36\x13\xbd\xf7\x8c\xdf\x01\x83\xcf\x63\x92\x91\x45\x29\xdf\xb8\x17\x95\x4c\xbb\xa9\xd3\x4e\xd2\x49\x9a\x99\x38\x37\xad\xa8\x74\x60\x62\x45\xa1\x06\x01\x06\x00\xa3\xca\x51\xde\xbd\x03\xfe\x88\xbf\x92\xdd\x1b\x27\xc4\x9e\x73\xb0\xd8\x5d\xec\x42\x5f\x89\x42\x91\xcc\x84\x41\x01\x9a\xce\x4f\x4f\xec\xb7\x82\x2f\x19\x68\xa3\x51\x80\x16\xcb\xf9\xe9\xc9\xe9\xc9\x99\x4b\x65\x94\x25\x20\x8c\xe7\x2b\x20\x74\xeb\xae\x32\x11\x19\x26\x85\xeb\xa1\x6f\xa7\x27\x08\x21\x74\xe6\xe2\xff\xdd\x1b\x71\xcb\x81\xa8\x77\x32\xc6\x9e\x1f\x71\x16\x3d\x0c\x20\x2b\x74\xac\x64\x96\xde\x4a\xa1\x25\x07\xec\xf9\x90\xa4\x66\xeb\x7a\xf3\x36\xc8\x30\x05\x11\x49\xb1\xe7\xaf\x19\x85\x9e\x79\x4d\x4b\x6f\x2d\xc0\x24\xdc\xc5\x78\x08\xa2\x53\x29\x34\x1c\xc3\xa4\xa0\x34\x3b\x2e\xc3\xf3\x53\x75\xcc\xdf\xed\x7f\xf2\x3f\xa7\x27\xd5\x51\x11\x13\x91\x02\x1b\xae\x5b\x1b\xda\xfa\xe4\x0a\x4c\xa6\x44\x11\xf0\xd1\xc8\x12\x5b\x34\xbd\x96\x9b\xd7\x60\x08\xe3\xda\x65\x74\xcf\xd2\x60\x3e\xca\xcd\x1d\x70\x88\x0c\x50\x6b\x29\xf7\xe6\x32\xae\xe0\x55\xce\x16\x8c\x2e\xbd\xbe\x70\x4f\xa1\xd4\x3e\x73\xb1\xcf\x99\x36\xe3\x3c\x17\x63\x66\x20\xc1\x36\xc5\x89\xfc\x0a\xb7\x9c\x68\xed\x3a\xba\x64\xfd\xa5\xe4\xc6\x29\x77\xb6\xf1\x50\x72\x33\x2e\x77\x1d\xe3\x11\xa3\x9e\x4f\x28\x3d\xc4\x69\xbb\x13\x83\xb9\x95\x5c\xaa\x9f\xb7\x77\x86\x98\x4c\xbb\x3a\xff\xe7\x56\x52\xc8\x1d\x2b\x4e\xc7\x56\xa8\x61\x40\x41\x80\xfe\x3f\x9d\xa2\xdd\x0e\x75\x17\x5f\xb6\x2a\xab\x8c\x31\xd6\x59\x14\x81\xd6\xb8\xca\x13\x02\xae\x61\x40\xf4\x72\x7a\x39\xc8\xa7\x44\xc4\xa0\x3a\xf4\x01\xdc\x86\x28\xc1\x44\xbc\x07\x76\x0f\xdb\x48\xd2\xdf\x5a\x8a\xd6\x7d\xa9\x8b\x7b\x45\x28\x7c\xc8\x8c\xfb\x72\x3a\x2d\x6a\xa9\x88\x40\x4e\xf1\xab\xfa\xf5\xcb\x22\x05\x8a\xce\xcf\xd1\x01\x93\x2f\x48\x92\x1f\x0c\x63\xaf\xe1\x2e\x05\x0e\x06\xda\xa4\x05\xde\xb3\xf0\xb2\xf6\xbf\xbd\x79\x09\xd9\xef\x58\x7e\x3f\x63\x9b\x12\xb9\xc0\x16\xda\xdc\x60\x40\xde\x2f\x89\x41\x80\x56\x84\x6b\x78\x52\xb3\x58\x7c\x4a\x95\x24\x5f\xd2\x9e\xe7\x76\xd1\xcf\x14\x7f\xa6\xf7\x16\xde\x0f\x4f\xa3\x51\xa2\x00\xfd\x76\xf7\xe1\x77\x5f\x1b\xc5\x44\xcc\x56\xdb\x2a\x6b\xb9\xf5\x02\x65\x82\xc2\x8a\x09\xa0\x17\xe8\xb2\xba\xba\x05\xbd\x48\xc3\x41\x7e\x61\x3e\x2c\x50\xa5\x66\x98\x5f\x5a\xfb\xf4\x5a\x80\xcb\xf8\xf0\xe6\x19\x3f\xe2\x7b\x71\x87\x50\xd0\xa9\xc2\xfa\x6a\xcd\x87\xaa\x9c\x18\xa3\x5c\x27\xb2\x4d\xc2\xb9\x40\x0e\xe1\xa0\x0c\xca\xff\x8e\x1d\x34\x3a\xd4\x17\x3c\x6f\x50\xcc\x5e\x99\xb7\xa2\xba\x31\xb5\xbd\x20\x55\x9d\xba\x94\xe8\x28\xb4\x46\x46\x33\x5b\x7e\x02\x66\x2d\x29\x1a\x21\x8c\x30\x1a\xa1\x96\x2d\x25\x66\xdd\x54\xea\x0d\x1f\xbd\x15\x86\xfc\xf3\x86\xc5\x6b\xce\xe2\xb5\xa9\xba\xb2\xd7\x25\xb5\xc7\x51\x9f\x55\xd8\x3b\xb4\xce\x84\xea\xb2\x4a\x73\x87\xd4\x98\x59\x5d\x02\x97\xb1\xb7\xef\xcd\xed\x86\xf5\xb1\xf0\xbb\xdd\xb0\xfe\x4b\xda\x2d\x96\x51\x14\xf4\x26\x61\xc3\x4e\x89\x01\xc3\x6c\x13\xc9\x13\x9f\x29\x05\xc2\x7c\x62\x09\xb4\x50\xab\x8c\xf3\x77\x79\x99\xee\xf1\x36\x37\x57\xe3\x7e\x7a\x9e\x4a\xdd\xbc\x1a\xc2\xf5\xa8\x2c\x4f\xd2\x08\x59\xe7\x51\x42\xd2\x14\x04\x75\x9d\x2b\xce\x10\xa3\x01\x6e\x4e\x3d\x5b\xb2\xcc\xee\xe7\x60\x94\xd7\x74\x80\x3b\xb3\x14\x75\xbe\x8f\x56\x79\x21\x24\x45\xfe\x6c\x0a\x70\xf3\x31\x50\xef\xe4\xcd\xcb\xb9\x93\x77\x49\x7c\x6d\x2d\x55\x88\x46\xc8\xb9\x9a\x70\x76\x5d\x4d\xe9\xee\x7b\xa2\x58\x8c\xec\x03\xed\x03\xa7\xef\x64\xac\xf7\x91\xd6\x91\x92\xb9\x88\x7e\x2d\x37\xc2\x1d\x2a\x8b\x36\xaf\x59\x14\x5c\xc6\x6f\x0d\x24\x77\xec\xd1\xe6\xb2\x1b\x44\xc4\x19\xf6\x7c\xcd\x1e\xeb\xbc\xda\x21\xdc\x24\x5d\xa3\x1f\xa6\x9d\xd7\xa1\xd3\xd5\x98\xad\x98\xd2\xc6\xa9\x1e\x27\x7b\xad\xde\xbc\xed\x1e\xa5\xd2\xb5\x9b\x5a\xdf\xa2\xf5\xc3\xab\xcc\xc8\xbb\x1c\x86\x3d\x9f\x69\xd7\x99\x45\x6b\x88\x1e\x80\x3a\xde\x53\x8f\xd4\x42\xfd\x93\x4c\xdd\x01\x63\x0c\xc6\x9d\x56\x98\x37\x60\x6f\xd9\x41\x37\xbb\x25\xdf\x0c\x68\x54\x18\x6c\xc1\xa3\x00\x09\xd8\xa0\xd7\xc4\xc0\xa1\xcb\xd3\x40\x5b\x0f\x0a\xa8\xbd\x05\x13\x8c\x46\xf5\x61\xdc\x0e\xee\xbd\x14\x66\x9d\x03\x5f\x0e\xa0\x3b\xe0\x5f\x33\xce\xff\x00\xa2\x0a\x61\xf4\x13\x3a\x06\x7e\x23\x33\xa5\x0b\xe4\xec\x18\xee\x3d\x13\x99\x81\xe7\x20\xef\x20\x92\x82\xd6\xe5\x5a\xde\x81\x2a\x08\xfd\xf7\x6e\xa7\xd5\xb5\xfa\x98\xfd\xa8\x3b\x58\xca\x49\x04\xee\xe4\x7c\x12\x5f\x20\xe7\x9c\x24\xe9\x3c\xaf\xb1\x72\xf9\xaa\x58\xe6\xa6\xb5\x7a\x5d\xac\xc6\x76\xb5\xed\x51\x5b\xd4\xc5\x6e\x18\x66\x0b\x32\x7e\x7c\x35\xfe\x73\x3a\xfe\x71\xf9\xed\xf2\xfb\x2e\x0c\x17\x9f\xb3\xe5\x6e\xf1\x39\x0c\xf1\xd2\x7b\x81\xdd\x50\xbf\x98\x79\x37\xbb\xf0\xde\x35\x2a\x83\x5d\x7e\xb1\x77\x22\xe3\xdc\x0b\xef\x77\xe3\x9b\x90\x8e\xdc\x9b\x59\xe8\x87\xf4\x85\x77\xe3\xde\xcc\x16\xf0\xcb\x72\x31\x0a\xc7\x4b\x6b\xf1\x6e\x3c\xeb\xcb\xfe\x37\x56\x42\x4c\xb4\x6e\xd5\x70\x5e\x4f\xdc\xb6\x6c\x47\x64\xc9\x3d\x28\xa7\xf1\xbb\xc6\xde\x89\xc9\x67\x3c\xf1\x8d\xed\xf6\x05\xb9\xc5\xde\x83\x66\x67\xc7\x41\x45\x67\xc9\xb7\x79\x80\x6d\x73\x0f\x34\xf8\x7a\xee\x70\x8a\xd7\x47\x8f\x56\x7f\x36\x9e\xef\x93\x3a\x4c\xc7\x7d\x2a\xb5\xef\xa5\xe4\x40\x44\x53\xbc\xa9\x66\x23\xfd\x2c\x1d\x0b\x6c\x89\xf4\x7e\x0b\x38\x57\x3a\x25\xa2\x9a\x05\xb6\x35\x5b\xaa\x6d\xeb\x79\x9f\xce\xe5\x8b\x2e\x6d\x71\xd7\x4e\xeb\x27\xe4\xbf\x01\x00\x00\xff\xff\x33\xbd\x65\x36\x8a\x0f\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 3978, mode: os.FileMode(438), modTime: time.Unix(1479111250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html":    tmplIndexHtml,
	"tmpl/js/script.js":  tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

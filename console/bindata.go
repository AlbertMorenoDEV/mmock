// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xcd\x6e\xdb\x30\x10\x84\xcf\xe5\x53\x2c\x10\xf4\x12\x94\x8e\xed\x1a\x69\x21\x9d\xd2\x9f\xbc\x46\xc1\x9f\x95\x44\x68\xc5\x15\xd6\x54\xa5\x40\xf0\xbb\x17\x94\xe5\xaa\x40\xeb\x5e\xe7\x9b\x19\x2e\x86\x96\xfd\x1b\xcc\x0a\x00\x80\x42\x44\xdd\x60\xa8\x9b\x54\xc0\x61\xf7\x8c\x5d\x09\x4f\x8f\x50\x85\x09\x2a\x16\x48\x8d\x09\x50\x71\x4c\x8f\x4f\xea\xa2\x94\x6a\x52\x47\x1f\xe0\x8f\xfc\xef\xe8\x7e\xff\xbe\xcc\x96\x9d\xe3\x98\x4c\x88\x28\xba\xa2\x21\xf8\x59\xbd\xeb\x42\xd4\x7f\xfb\x7a\x13\x91\xf4\xad\xea\xc6\x3f\x1e\xf7\xfd\x54\x42\x76\x14\x85\x1e\xd1\xb6\x21\xe9\xb3\x13\x26\xb2\x46\xd6\x47\xc7\xe0\x53\x53\xc0\xe1\xd8\x4f\xb9\xeb\x1f\x46\x9d\xc4\xb8\x76\xb5\x5b\xe3\xda\x5a\x78\x88\x5e\x3b\x26\x96\x02\x1e\xbe\xbe\x7c\x3f\xbd\xbe\x94\x57\xcc\xe2\x51\x34\x61\x95\xef\xeb\x27\x38\x33\x05\x0f\x0f\xce\xb9\xbb\xed\xcd\xd0\xd9\xfb\xed\xa7\xe3\x67\xeb\xcc\x7f\xc3\x45\xc3\x3f\x51\xee\x57\x1c\xbe\x7d\x3a\x7d\x79\x5d\x96\x52\xbd\x60\xf6\xad\x13\x1d\x9e\xf3\x42\x0a\x20\x17\x54\xc4\x63\x61\x86\xc4\x59\xb8\xce\xb2\x2d\x7c\x46\x42\x97\xd0\xff\x10\x1e\x61\x5e\xbe\x51\x8f\xeb\xce\x96\xc9\x97\x17\xb5\x3b\x27\x09\xb1\x86\x19\xd6\x87\x6b\x41\x8c\x25\x5c\xd4\x2e\x0e\x9d\xcd\x17\xde\x88\x37\xd2\xb2\x98\x58\xe3\x82\x2d\x33\xa1\x89\x1b\xb7\x34\xe0\x1a\x24\xda\xe4\xce\xd4\x18\x93\x59\x48\x8b\x6f\x1b\x10\xf4\x59\xfc\x15\x00\x00\xff\xff\x43\xd7\x46\xd6\x8c\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 652, mode: os.FileMode(420), modTime: time.Unix(1479045927, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x6d\x6f\xdb\x38\x12\xfe\x6c\xff\x8a\x59\xde\x1d\x90\xa2\x27\x29\x8e\x37\x6d\x36\x91\x0c\xa4\x49\xf6\x8a\x20\x6e\xdc\xda\x97\xdc\xee\x37\x8a\x1a\x49\xb4\x29\x52\x26\x29\xbf\xf4\xd0\xff\x7e\xd0\x9b\x5f\x12\x27\x6d\x71\xd8\x7c\xb0\x25\x72\xe6\x79\x66\xe6\x99\x21\x63\xff\x97\xeb\xfb\xab\xc9\x1f\xa3\x1b\xf8\x38\x19\xde\x0d\xba\x7e\x6a\x33\x51\x7e\x21\x8d\x06\xdd\x8e\x9f\xa1\xa5\x90\x5a\x9b\x3b\x38\x2f\xf8\x22\x20\x57\x4a\x5a\x94\xd6\x99\xac\x73\x24\xc0\xea\xb7\x80\x58\x5c\x59\xaf\xf4\xbd\x00\x96\x52\x6d\xd0\x06\xff\x9e\xfc\xee\x9c\x11\xf0\x4a\x18\xcb\xad\xc0\xc1\x70\xa8\xd8\x0c\xae\x94\x34\x4a\x20\xf4\x7c\xaf\x5e\xee\x76\x3b\xbe\x61\x9a\xe7\x16\x8c\x66\x01\xf1\x3c\xa6\x22\x74\xa7\xf3\x02\xf5\xda\x65\x2a\xf3\xea\x47\xa7\xe7\xf6\x4e\xdc\x63\x37\xe3\xd2\x9d\x1a\x32\xf0\xbd\xda\x6b\xf0\xa3\xfe\x19\x4f\x34\xb5\xe8\xf4\xdc\x13\xb7\x77\x00\xa6\xdb\xf1\x7f\x71\x1c\xb8\xa3\x16\x8d\x05\xa6\xb2\x9c\x0b\x8c\x80\xca\x08\x32\x2e\x79\xcc\x31\x82\xab\xf1\x18\x1c\xa7\xa4\x14\x5c\xce\x40\xa3\x08\x88\xb1\x6b\x81\x26\x45\xb4\x04\x52\x8d\x71\x40\xca\x8a\x99\x73\xcf\xcb\xe8\x8a\x45\xd2\x0d\x95\xb2\xc6\x6a\x9a\x97\x2f\x65\x40\x9b\x05\xaf\xef\xf6\xdd\x77\x1e\x33\x66\xbb\x56\x45\xc6\x8c\x21\xc0\xa5\xc5\x44\x73\xbb\x0e\x88\x49\x69\xff\xec\x57\xa7\x37\x3f\xcb\x26\xb7\xf7\x97\xe3\xd5\xd9\xb4\x77\x59\xbc\xa5\xa7\x8f\xd7\x0f\x72\xc4\x4f\xc4\xec\xf7\x78\xb9\xbc\xb9\xa4\x67\xe9\xf5\x75\x34\xfd\x53\xe4\x77\x98\xac\xd2\xe9\xc3\xf0\xa6\x17\x27\xd3\xc7\xd1\xbf\xb2\xd9\x57\xf3\x9e\x00\xd3\xca\x18\xa5\x79\xc2\x65\x40\xa8\x54\x72\x9d\xa9\xc2\x90\x4d\xf6\xf7\xb9\xe5\x4a\x52\x01\x36\xc5\x0c\xff\xea\x5c\x9d\x8a\xe5\xb5\x8c\xe3\xbb\xc7\x93\x4f\xc7\x3d\x31\x9c\x4f\xe9\xec\xc3\x6c\xd5\x17\xde\xf0\xb7\x1b\x9a\x16\xcb\x7c\x1c\xe3\xa7\xc5\xc3\xbb\xfe\xed\x29\x7e\x95\xfd\xe2\xcf\xaf\x34\x9f\x1c\x17\xef\x6f\xfe\x30\xff\x19\x4e\x3f\x3f\xbc\x3d\xbe\x91\xa7\xfa\xfb\x19\xbf\xaa\xf7\x2d\x5d\xd0\x71\xdd\x5c\x75\x29\x76\x3b\xed\x67\x53\x9f\x3e\x55\x79\x7a\x30\xe5\xe3\x6c\x1c\xde\x5e\xdf\x7c\xe4\x54\xc4\x59\xf1\xe1\xc3\xe7\xd1\xbb\xcb\x5f\x3f\xeb\x5c\xcf\x4f\xef\x1f\xe2\xc7\xfe\xfb\xd1\x97\x2f\xfd\xe9\xe9\xcd\xdd\x7c\x65\x4c\x6f\xfd\x30\xbf\xb7\x12\x73\xf9\xf1\x61\xf4\x1b\xbd\x7d\xbf\x1a\xbf\x9c\xf2\x5e\xaf\x37\x99\xd8\x75\x8e\xcd\x00\x6f\x93\x25\x75\x82\x53\xd3\x38\x3c\x9f\x94\xc3\x2d\xb1\x03\x56\xe9\x59\xb7\x48\x29\x79\x65\x55\x89\xbc\x39\x57\x24\xcd\x30\x20\x0b\x8e\xcb\x5c\x69\xbb\x73\x9a\x2c\x79\x64\xd3\x20\xc2\x05\x67\xe8\x54\x2f\xff\x04\x2e\xb9\xe5\x54\x38\x86\x51\x81\x41\xaf\x44\xf9\x4e\x0a\x83\x6e\xe7\xef\x47\x10\x29\x56\x64\x28\x2d\xbc\x71\x35\xd2\x68\x7d\x14\x17\x92\x95\x2d\x7e\xf4\x06\xfe\xdb\xed\x74\x00\x16\x54\xc3\xd2\x40\x00\x12\x97\xf0\x88\xe1\x58\xb1\x19\xda\x23\xb2\x2c\xa5\x25\xf0\x16\x84\x62\xb4\xf4\x70\x53\x65\x2c\xbc\x05\xe2\x21\x4b\x15\x79\x73\x51\xb9\x2f\x8d\xab\x64\x86\xc6\xd0\x04\x21\x80\x0d\x3c\xb6\xf8\x0d\xc5\xd6\xe4\x76\x7c\xff\xc9\xcd\xcb\x53\xf2\x08\x17\x28\xad\x1b\x51\x4b\x1b\xb4\x0e\x80\x50\xc9\x17\x9c\x17\x68\xec\x51\xe3\xf3\xe6\xa2\xdc\x2a\xff\x2a\x9b\x6f\x17\xdd\xce\xb7\xca\x7e\xab\x88\xef\xd5\x47\x76\xb7\xeb\x87\x2a\x5a\x0f\x9a\xde\x1e\x5b\xca\x66\xe5\x28\x03\x53\xa2\xc8\xa4\x01\x25\x21\x53\x21\x17\x08\xe1\x1a\x32\x3a\xe3\x32\x01\x25\x11\xe2\x42\x88\xba\xd6\xd5\x00\x94\x2e\xca\xa6\xa8\x21\xa5\x22\x6e\x36\xea\x09\x88\xf8\x02\x98\xa0\xc6\x04\xa4\x54\x8c\x72\x89\xda\x89\x45\xc1\xa3\x56\x41\x02\x95\xda\x01\xc9\x69\x14\x71\x99\x9c\x43\xef\x34\x5f\x5d\xd4\x9a\xed\xb8\x6b\xb5\xac\xd6\x9e\x60\x0a\x27\x8b\x9c\xde\x49\x19\xb2\x23\x92\xfa\xa9\xba\x33\x6a\xe3\x3d\xeb\x9c\x4a\x14\x50\x7d\x3a\xb9\xe6\x19\xd5\x6b\x02\xb5\xd9\x73\x3b\xa7\xac\x11\x97\x49\x83\xd3\xe9\xf8\x69\x7f\xdf\xa0\xba\x91\xc8\xfe\x4d\xe5\x7b\x69\xbf\x45\xf4\x22\xbe\x78\x11\xbd\x2c\xfc\x26\x75\xb5\x40\x1d\x0b\xb5\x3c\xa7\x85\x55\x1b\xc2\xe6\xab\xe3\x17\xa2\xf5\x15\xdc\x58\x27\xd1\xaa\xc8\x09\xf0\x28\x20\xd5\xe3\xd5\x5e\xc2\x7b\x9e\x5e\x21\xf6\xd1\x5e\x0f\x2a\x56\xca\xa2\xde\x66\x2c\x68\x88\xe2\x89\x3e\x8e\x55\xf9\x39\xf4\xfe\x71\xb1\xe5\xf3\xb9\xcc\x8b\x76\xb2\x58\x8a\x6c\x16\xaa\x55\x1d\x20\x4b\x67\x97\x85\x55\x63\xa6\x95\x10\x04\xaa\x4d\x8c\x02\x62\x75\x81\x04\x06\x50\x6e\x82\xa9\x76\x5b\x52\xaf\x62\xdd\xc4\x10\x16\xd6\x2a\xd9\x80\xd7\x2f\xa4\x8d\x3a\xb4\x12\x42\x2b\xb7\x62\x5a\x1a\x72\x19\xe1\x2a\x20\xc7\x35\x7f\x68\xe5\x95\x40\xaa\xef\x54\xb2\xa9\x76\x2c\x14\xb5\xe7\x9a\x27\xa9\xdd\x26\xe1\x9b\x9c\xca\x16\x37\x11\xeb\x3c\xe5\x4c\x49\xd8\x3c\x39\x1a\x33\xb5\x40\xc7\xf0\x44\x56\xa7\x5b\x4e\xe5\x00\x2a\xec\xad\xf6\x75\x78\xcf\xf5\xdf\x3e\xd6\x4f\x9d\xee\xce\xda\x77\x9b\x9c\x0a\xd4\x16\xaa\x4f\x87\xcb\x58\x6d\x12\x89\xb8\xc9\x05\x5d\x9f\x4b\x25\xb1\x4e\xb7\x32\x1a\xa2\x31\x28\x13\x24\x83\x47\x14\x4c\x65\xe8\x6e\xb9\x5e\x22\x85\x1f\x1a\x2d\x63\xa9\xad\x6e\xc3\x1f\x99\xac\xff\x7b\xb0\x3e\x4e\x26\x23\xb8\x46\x4b\xb9\x30\x3f\x37\x57\xe5\xa5\xb3\xdd\x2f\x0b\x63\xb9\x46\x46\xf3\x17\x4a\x77\xa0\xd0\xa6\x60\x0c\xcb\x5b\xa9\x8d\x12\xc0\x37\x56\x2b\x99\x0c\xea\x56\xa9\x51\xdb\x8a\x40\xd3\x11\xbe\xd7\x18\xc1\xae\x95\xae\x8f\xe8\xad\xd9\xa6\xd7\xb7\xa9\xb4\x43\xbb\x33\xed\x92\x2e\x40\xd2\x85\x63\x69\x68\xc8\x4e\x1c\x82\x6f\x22\x66\x96\x2f\xca\x41\xf2\x69\x73\x7d\xfe\xcd\xd2\xb0\xa5\x83\xf2\xae\x70\xac\x4a\x92\x32\x65\x4b\x43\x32\x68\x2e\x0b\xdf\xa3\x03\xdf\x13\x7c\x0f\xf4\x29\x88\xc9\x95\x34\x78\x18\xa5\xde\x7b\x0a\xd3\x79\x86\x92\xa3\x36\xfc\x70\x28\xa3\x7a\xeb\x07\x42\x11\xe5\xf0\x3e\x07\xb8\x53\xc9\x53\xe7\xfa\xc0\xdb\x53\xbf\xa9\x94\xa5\xa1\xd3\xde\x38\x3b\x54\x9b\xfe\xd8\xa9\xda\x8e\x47\xd9\x53\x10\xd3\x08\x81\x4b\x68\x8a\xbd\xf5\x06\xf0\x73\x8d\x95\x7f\x1a\x6d\x34\xf6\xbd\x5c\xe3\x0e\xc5\xae\xc6\x4f\x19\xdb\x12\x1f\xa2\x7c\x99\xa8\xf1\x7a\x95\xa9\xb3\x4b\xb4\x51\xe1\x67\x78\x5a\xa7\x83\x34\x70\x38\xa3\x4a\xa9\x9f\x21\x29\x1d\x5e\x27\x38\x30\x23\xcd\xd2\xc1\xa3\xb5\xbb\x73\xca\xb5\x2b\xdd\xae\xef\xd5\xff\xe8\xf8\x5e\xfd\x9b\xf5\x7f\x01\x00\x00\xff\xff\x26\xb6\xdc\x52\xcb\x0e\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 3787, mode: os.FileMode(420), modTime: time.Unix(1479060503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x57\xdd\x72\xdb\x36\x13\xbd\xd7\x53\x60\xf0\x79\x4c\x32\xb2\x68\xe5\x1b\xf7\xa2\x92\x69\x37\x75\xda\x49\x3a\x49\x33\x13\xe7\xa6\x15\x95\x0e\x4c\xac\x28\xd4\x20\xc0\x00\x60\x54\x25\xca\xbb\x77\x40\x90\x12\x09\xfd\x38\xbd\xf0\x8f\xb0\xe7\x1c\x2c\x76\x17\xbb\xd0\x67\xa2\x50\x26\x2b\x61\x50\x82\xc6\xd3\x81\xfd\xa8\xe0\x53\x05\xda\x68\x94\xa0\xd9\x7c\x3a\x18\x9c\x85\x54\x66\x55\x01\xc2\x44\xb1\x02\x42\xd7\xe1\xa2\x12\x99\x61\x52\x84\x11\xfa\x3a\x40\x08\xa1\xb3\x10\xff\xef\xc1\x88\x3b\x0e\x44\xbd\x91\x39\x8e\xe2\x8c\xb3\xec\x71\x1f\xd8\x82\x73\x25\xab\xf2\x4e\x0a\x2d\x39\xe0\x28\x86\xa2\x34\xeb\x30\x9a\xf6\x30\x86\x29\xc8\x48\x89\xa3\x78\xc9\x28\xf8\xd6\x25\x6d\xfc\xb4\x76\x53\xf0\x10\xe3\x03\x08\x5d\x4a\xa1\xe1\x04\xa4\x04\xa5\xd9\x49\x11\x5e\x9f\xa7\x6f\xfd\x16\x4d\x07\xf6\x67\xd0\x1e\x10\x31\x91\x29\xb0\x31\xba\xb3\xc1\xdc\x9e\x57\x81\xa9\x94\x70\x11\x1e\x0e\xa7\x83\x6f\x1d\x8a\x5e\xca\xd5\x4b\x30\x84\x71\x1d\x32\xda\x32\x34\x98\xf7\x72\x75\x0f\x1c\x32\x03\xd4\x1a\xdc\x96\x5c\xe6\x2d\xb8\x4d\xd0\x8c\xd1\x79\xe4\x69\xee\xb1\x9d\xec\x59\x88\x63\xce\xb4\x19\xd5\x81\x1f\x31\x03\x05\xb6\xd9\x2c\xe4\x67\xb8\xe3\x44\xeb\x30\xd0\x0d\xe9\x2f\x25\x57\x81\xdb\xd4\x06\x40\xc9\xd5\xa8\xd9\x70\x84\x87\x8c\x46\x31\xa1\xf4\x08\xa5\xeb\x49\x0e\xe6\x4e\x72\xa9\x7e\x5e\xdf\x1b\x62\x2a\x1d\xea\xfa\xcf\x9d\xa4\x60\x7d\xaa\xcf\xc4\x16\xa8\xb3\x8c\x92\x04\xfd\x7f\x3c\x46\x9b\x0d\xf2\x17\x9f\x77\xeb\xa7\x89\x29\xd6\x55\x96\x81\xd6\xb8\x49\x09\x02\xae\xe1\x80\xe4\xd5\xf8\xea\x10\x9b\x12\x91\x83\xea\x93\xf7\x51\x2b\xa2\x04\x13\x79\x0b\xeb\x9d\xb0\x93\x91\xbf\xb5\x14\xdd\xbb\xb0\x2b\xdd\x05\xa1\xf0\xae\x32\xe1\xf3\xf1\xd8\xd6\x8b\x3b\x75\x8d\x8f\xdb\xea\x8c\x9b\x1a\x04\x8a\xce\xcf\xd1\x11\x53\x2c\x48\x51\x1f\x07\xe3\x68\xe7\x26\x05\x0e\x06\xfa\x9c\x19\xde\x92\xf0\xbc\xf5\xbb\xb7\x71\x63\xdf\xee\xd6\x7c\x7e\x7a\x8b\x06\x38\xc3\x16\xb9\x13\x3f\xa0\x1d\x37\xb4\x24\x41\x0b\xc2\x35\x3c\x25\xe8\x16\x4f\x4b\x92\xe2\x53\xb9\xe7\xb3\x5d\x8c\x2b\xc5\xbf\xcf\x6f\x8b\xf6\x82\xd2\xe9\x78\x28\x41\xbf\xdd\xbf\xfb\x3d\xd6\x46\x31\x91\xb3\xc5\xba\xcd\x53\x6d\xbd\x40\x95\xa0\xb0\x60\x02\xe8\x05\xba\x6a\x6e\xa5\x63\xbb\xc0\x1f\xa5\x3b\xf3\x51\x7e\x9b\x8e\xc3\xf4\xc6\xba\xc7\xde\xd2\xb9\xcc\x8f\xef\x5c\xf1\xe3\x7e\xbb\x6b\x82\x12\xaf\xe4\x76\xb7\x67\x7a\xa0\x9e\x89\x31\x2a\x0c\x32\x7b\xff\x83\x0b\x14\x10\x0e\xca\xa0\xfa\xf7\x28\x40\xc3\x63\xb7\x3e\x8a\x0e\x69\xd9\xbb\xf1\x5a\x34\x57\x63\x67\x76\x94\xb6\xe7\x36\x02\x7d\x7e\xaf\xf1\x77\x93\x14\x17\x60\x96\x92\xa2\x21\xc2\x08\xa3\x21\xea\xd9\x4a\x62\x96\x1d\xa1\xbd\x09\xa2\xd7\xc2\x90\x7f\x5e\xb1\x7c\xc9\x59\xbe\x34\x6d\x9f\x8d\x3c\x4e\x7f\xa6\xec\x93\x9c\xbd\xcf\xf2\xc6\x8c\x4f\x6a\xcc\x7d\x4e\x67\xf0\xf8\x78\x2e\xf3\xc8\xf5\xdb\x5e\x3b\x7a\xef\x1c\xee\xb5\xa3\xff\x90\x69\x0b\x65\x14\x25\x7b\xc3\x6c\x67\xa6\xc4\x80\x61\xb6\x4d\xd4\xa9\xae\x94\x02\x61\x3e\xb0\x02\xba\xa0\x45\xc5\xf9\x9b\xba\x2a\xb7\x70\x9b\x8f\xeb\xd1\x7e\x4a\x9e\x4a\xd7\xb4\x99\xa2\xbb\x81\xd7\x9c\x62\x17\x28\xef\x29\x41\xca\x12\x04\x0d\x83\x6b\xce\x10\xa3\x09\xee\xce\x2f\x5b\xa1\xcc\xee\x16\x60\x54\x97\x70\x82\xbd\xa1\x88\xbc\xcf\x27\x8b\xda\x09\x49\x51\xbf\x75\x12\xdc\x9d\xe7\xbb\x9d\xa2\x69\x33\x4b\xea\x3e\x88\x6f\xac\xa5\x0d\xd0\x10\x05\xd7\x97\x9c\xdd\x34\xe3\xd6\x7f\x11\xd4\x6b\x99\x7d\x53\xbd\xe3\xf4\x8d\xcc\x75\x1b\x64\x9d\x29\x59\x2b\xe8\x97\x72\x25\x42\xbf\x12\xfa\x94\x4e\x1d\x70\x99\xbf\x36\x50\xdc\xb3\x2f\x36\x81\x7e\xf0\x10\x67\x38\x8a\x35\xfb\xb2\x4d\xa6\x1d\xa6\x5d\xce\x0d\xfa\x61\xdc\x7f\xc9\x05\xbe\xc2\x64\xc1\x94\x36\x41\xfb\xb6\x68\x95\xfa\x93\xd3\xf7\xbf\x91\xb4\xdb\x59\xa7\xb2\xe5\xe3\x8b\xca\xc8\xfb\x1a\x85\xa3\x98\xe9\x30\x98\x64\x4b\xc8\x1e\x81\x06\xd1\x13\x4f\x49\xa7\xfd\x41\x96\xe1\x01\x63\x0e\x26\x1c\xb7\x98\x57\x60\xef\xd2\x41\x07\xfd\xda\xee\xc4\x30\x73\xeb\xb6\xb2\x51\x82\x04\xac\xd0\x4b\x62\xe0\xc8\x1d\xe9\x80\xed\xde\x0e\x69\xab\xfd\x12\xa3\xe1\xf6\x14\xa1\x07\x7b\x2b\x85\x59\xd6\xb8\xe7\xfb\x60\x0f\xfb\x6b\xc5\xf9\x1f\x40\x94\x93\x45\x3f\xa1\x13\xd8\x57\xb2\x52\xda\x01\x27\x27\x60\x6f\x99\xa8\x0c\x7c\x07\xf0\x1e\x32\x29\xe8\xb6\x2a\x9b\x3a\x6f\x8f\xef\x3d\x4c\xbd\x0e\xd6\x6d\x51\xf6\xff\x5d\x73\x2a\x39\xc9\x20\xbc\x3c\xbf\xcc\x2f\x50\x70\x4e\x8a\x72\x5a\x57\x53\xb3\x7c\xed\x96\xb9\xe9\xad\xde\xb8\xd5\xdc\xae\xf6\x9c\xe9\x6b\x86\x38\x4c\xd3\x6a\x46\x46\x5f\x5e\x8c\xfe\x1c\x8f\x7e\x9c\x7f\xbd\xfa\xb6\x49\xd3\xd9\xc7\x6a\xbe\x99\x7d\x4c\x53\x3c\x8f\x9e\xe1\x30\xd5\xcf\x26\xd1\xed\x26\x7d\x08\x8d\xaa\x60\x53\xdf\xdb\x8d\xa8\x38\x8f\xd2\x87\xcd\xe8\x36\xa5\xc3\xf0\x76\x92\xc6\x29\x7d\x16\xdd\x86\xb7\x93\x19\xfc\x32\x9f\x0d\xd3\xd1\xdc\x5a\xa2\xdb\xc8\xba\xb2\xfd\xde\x53\x10\x93\x2d\xbb\x15\x5b\x97\x10\xb7\xbd\x38\x10\x55\xf1\x00\x2a\xd8\x7d\xdf\xb0\xf5\x7f\xf9\x11\x5f\xc6\xc6\x36\x71\x47\xed\x72\xb7\x98\xc9\xd9\x49\x8c\x6b\x1b\xf5\x1e\x8f\xb0\xee\x6c\x80\x0e\x3d\x75\x3d\x86\x7b\x43\xf8\xa4\x81\x47\xaf\xdd\xd8\x85\xe7\xa4\x3b\x8d\xf0\x83\x94\x1c\x88\xe8\x28\x77\xb5\x6c\x7c\xbf\x47\xc5\xe2\xba\x12\xfe\x8b\x3d\xb8\xd6\x25\x11\x6d\x77\xb7\xcd\xd6\x12\x6d\xa3\xae\x3b\x6f\xad\xed\xfa\xae\xc5\xdd\x04\x9d\xef\x73\xff\x06\x00\x00\xff\xff\x02\x75\x3c\x1f\x0b\x0f\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 3851, mode: os.FileMode(420), modTime: time.Unix(1479061778, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html":    tmplIndexHtml,
	"tmpl/js/script.js":  tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

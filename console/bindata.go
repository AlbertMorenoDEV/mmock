// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xdd\x6e\xe2\x30\x10\x85\xaf\xd7\x4f\x31\x12\xda\x1b\xb4\xe6\x6f\x11\xbb\x4a\xae\xe8\x0f\xef\xe1\x9f\x49\x6c\xc5\xb1\xa3\xc1\x29\x20\xc4\xbb\xd7\x86\xd0\x54\x6a\x69\xae\x9c\x39\xdf\x39\x1e\x1d\xcb\xa0\x4f\x70\x66\x90\x3e\x67\x3d\x72\x83\xb6\x36\xb1\x80\xe5\x6c\x83\x6d\x09\xf3\x29\x54\xf6\x08\x55\x20\x88\x46\xd8\x74\xf0\x71\x3a\x67\x17\xc6\x98\x89\xad\xfb\x03\x9f\xfc\x1f\xd6\xc5\xe2\x77\x99\x91\x99\x4a\xb4\x48\xa9\xc4\x2b\xd7\x5b\x7d\x66\xbf\x5a\xeb\xf9\x57\xae\x13\x1e\x1d\xbf\x47\xdd\xf5\xbf\xab\x45\x77\x2c\x21\x13\x45\xc1\x0f\x28\x1b\x1b\xf9\x5e\x51\x70\x4e\x0a\x1a\x2e\x3d\x58\x1d\x4d\xca\x5a\x25\x34\x91\xdf\x80\x3c\x92\x50\xcd\x80\xcb\x74\xac\x29\xf4\x5e\x73\x15\x5c\xa0\x02\x26\xcf\xdb\xd7\xf5\x6e\x5b\xde\xe4\x40\x3a\x6d\xeb\xb0\xca\xfb\x75\x47\xd8\x07\x67\x35\x4c\x94\x52\x0f\xd3\x4d\xdf\xca\xc7\xe9\xeb\xd5\x7f\xa9\xc4\x8f\xe6\xc2\x84\x37\xa4\xc7\x11\xcb\x97\x7f\xeb\xa7\xdd\xb5\x29\xd6\x11\x66\x6e\xa8\x68\xb9\xc9\x0d\xa5\xff\x1c\x50\xb9\x70\x28\x44\x1f\x43\x1e\xdc\x6a\x19\x1b\xde\x47\xb2\xbe\x86\x33\x0c\xa1\x35\x21\xfa\x12\x2e\x6c\xe6\xd3\x06\xf9\xf6\xbb\xa2\x05\x35\x81\x84\xaf\xf1\x2a\xcb\x10\x1c\x0a\x3f\xea\xd2\xf5\x38\x18\x9d\x1b\xc7\xad\xa8\x31\x3d\xf6\x55\x69\xf0\x34\x0a\x84\x3a\x0f\xdf\x03\x00\x00\xff\xff\x58\xaf\x91\x51\x68\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 616, mode: os.FileMode(420), modTime: time.Unix(1465855632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x7b\x53\xdb\xba\x12\xff\xbb\x7c\x0a\xd5\xf7\xde\x19\x98\x5e\xdb\x84\x94\x42\xc1\xc9\x0c\x85\xf4\x72\x19\x52\xd2\x26\x07\x4e\xfb\x9f\x62\x2b\xb6\x12\x59\x72\x24\x39\x8f\x76\xf8\xee\x67\x65\xd9\x71\x02\x81\xc2\x9c\x39\x0c\xf8\xb1\xda\xfd\xed\x7b\xd7\x04\x6f\x2f\x6e\xce\x07\xdf\x7b\x1d\x74\x39\xe8\x5e\xb7\x77\x82\x44\xa7\xcc\xdc\x08\x8e\xda\x3b\x6f\x82\x94\x68\x8c\x12\xad\x33\x97\x4c\x73\x3a\x6b\x39\xe7\x82\x6b\xc2\xb5\x3b\x58\x66\xc4\x41\xa1\x7d\x6b\x39\x9a\x2c\xb4\x6f\x64\x4f\x51\x98\x60\xa9\x88\x6e\xfd\x31\xf8\xec\x1e\x3b\xc8\x37\x30\x9a\x6a\x46\xda\xdd\xae\x08\x27\x08\x10\x94\x60\x24\xf0\x2d\x71\x07\x8e\x55\x28\x69\xa6\x91\x92\x61\xcb\xf1\xfd\x50\x44\xc4\x1b\x4f\x73\x22\x97\x5e\x28\x52\xdf\x3e\xba\x0d\xaf\x71\xe0\xed\x7b\x29\xe5\xde\x58\x39\xed\xc0\xb7\x52\xed\x97\xca\xa7\x34\x96\x58\x13\xc0\x39\xf0\x1a\x5b\x60\x00\xe7\xad\xeb\xa2\x6b\xe0\x51\x1a\x3c\x4b\x33\xca\x48\x84\x30\x8f\x10\x30\xd3\x11\x85\x97\xf3\x7e\x1f\xb9\xae\x51\xc9\x28\x9f\x20\x49\x58\xcb\x51\x7a\xc9\x88\x4a\x08\xd1\x0e\x4a\x24\x19\xb5\x1c\x13\x2f\x75\xe2\xfb\x29\x5e\x84\x11\xf7\x86\x42\x68\xa5\x25\xce\xcc\x8b\x31\x68\x45\xf0\x9b\x5e\xd3\xfb\xe0\x87\x4a\xd5\xb4\xc2\x32\xa0\x38\x88\x42\x6c\x63\x49\xf5\x12\x74\x24\xb8\x79\xfc\xde\x6d\x4c\x8f\xd3\xc1\xd5\xcd\x59\x7f\x71\x3c\x6e\x9c\xe5\xef\xf0\xe1\xdd\xc5\x2d\xef\xd1\x03\x36\xf9\x3c\x9a\xcf\x3b\x67\xf8\x38\xb9\xb8\x88\xc6\x3f\x58\x76\x4d\xe2\x45\x32\xbe\xed\x76\x1a\xa3\x78\x7c\xd7\xfb\x5f\x3a\xf9\xa9\x8e\x20\x61\x52\x28\x25\x24\x8d\x29\x6f\x39\x98\x0b\xbe\x4c\x45\x0e\x61\xa8\xbc\xbf\xc9\x34\x15\x1c\x33\xa4\x13\x92\x92\x7f\xda\x57\xb7\xd0\xf2\x9c\xc7\xa3\xeb\xbb\x83\x2f\xfb\x0d\xd6\x9d\x8e\xf1\xe4\xd3\x64\xd1\x64\x7e\xf7\x63\x07\x27\xf9\x3c\xeb\x8f\xc8\x97\xd9\xed\x87\xe6\xd5\x21\xf9\xc9\x9b\xf9\x8f\x9f\x38\x1b\xec\xe7\x47\x9d\xef\xea\xcf\xee\xf8\xeb\xed\xbb\xfd\x0e\x3f\x94\xbf\xf7\xf8\xd9\x7c\x5f\xe1\x19\xee\xdb\xe2\xb2\xa1\x58\xaf\xb4\xd7\xba\x3e\x7e\x98\xe5\xf1\x56\x97\xf7\xd3\xfe\xf0\xea\xa2\x73\x49\x31\x1b\xa5\xf9\xa7\x4f\x5f\x7b\x1f\xce\xde\x7f\x95\x99\x9c\x1e\xde\xdc\x8e\xee\x9a\x47\xbd\x6f\xdf\x9a\xe3\xc3\xce\xf5\x74\xa1\x54\x63\x79\x3b\xbd\xd1\x9c\x64\xfc\xf2\xb6\xf7\x11\x5f\x1d\x2d\xfa\x4f\xbb\xbc\x51\xeb\xa5\x27\x1a\xfa\xb8\x6c\xdf\xda\x59\xc7\x3a\x08\x06\x5b\xae\xc7\x9d\xb2\xbd\x24\xd6\xc0\x8a\x7c\xda\x12\x31\x29\x2f\xb8\x8a\x24\xaf\xa6\x0a\xc7\x29\x30\xcf\x28\x99\x67\x42\xea\xb5\x59\x32\xa7\x91\x4e\x5a\x11\x99\xd1\x90\xb8\xc5\xcb\x7f\x21\x4c\x54\x43\x40\x5c\x15\x62\x46\x5a\x0d\x83\xf2\x1b\x17\x80\xe3\xdf\xbb\x28\x12\x61\x9e\x02\x2a\xda\xf3\x24\x8c\xb4\xe5\xee\x28\xe7\xa1\x29\xf1\xdd\x3d\xf4\x0b\x30\x10\x9a\x61\x89\xe6\x0a\xb5\x10\x27\x73\x74\x47\x86\x7d\x98\x51\x44\xef\x3a\x73\x93\xda\x5f\xbf\xbc\xff\x67\xf7\xf7\x27\x70\xef\x81\x91\xf7\xf7\x3e\x09\x13\xe1\xec\x9d\x16\xa2\x73\xe5\x09\x9e\x12\xa5\x70\x4c\x00\x60\x05\x4d\x2a\xec\x12\xbe\x66\xb9\xea\xdf\x7c\xf1\x32\x33\x1f\x77\xc9\x0c\xcc\xf2\x22\xac\x71\x89\x06\xbf\x4c\xc4\xdf\x60\xce\x42\x3d\xee\x96\x32\x7b\xa7\xe6\xc8\xfc\x14\x3c\xf7\xc0\x7a\x5f\xf0\xd7\xd9\x08\x7c\x3b\xac\x77\x76\x82\xa1\x88\x96\xed\xb2\xae\xfb\x1a\xc3\xb0\x85\x06\x83\xc0\xb2\x3c\xe5\x0a\x09\x8e\x52\x31\x84\x22\x47\xc3\x25\x4a\xf1\x84\xf2\x18\x68\x04\xec\x66\xcc\xc6\xb9\x28\x7e\x23\x22\xe0\x22\x51\x02\x15\x58\x1e\xd8\xea\x8f\xe8\x0c\x85\x0c\x2b\x05\x49\x85\x6c\x61\xca\x89\x74\x47\x2c\xa7\x51\x95\x3d\xa8\x1c\x93\xe9\x96\x93\xe1\x28\x02\x05\x27\xa8\x71\x98\x2d\x4e\x6d\xbe\xd6\xc4\xa5\x98\x17\xb4\x07\x98\xcc\x4d\x23\xb7\x71\x60\x4c\x76\x59\x6c\x9f\x8a\x6d\x61\x99\x37\xb8\x33\xcc\x09\x43\xc5\xd5\xcd\x24\x4d\xb1\x5c\x3a\xc8\xb2\x3d\xe6\x73\x4d\x8c\xc0\x9e\x12\x07\x38\x92\xe6\x26\x43\xb1\x8d\x9c\x87\x3b\x2a\x69\x56\x88\x3e\x40\x3e\x89\x6e\x02\xbf\x72\x5d\xcc\x88\x1c\x31\x31\x3f\xc1\xb9\x16\x2b\x85\xe5\xed\x4d\x90\xb3\x4a\x96\x51\xa5\xdd\x58\x8a\x3c\x83\x39\x10\xb5\x9c\xe2\xf1\x7c\xc3\xe1\x0d\x49\x3f\x67\x9b\x68\xcf\x1b\x35\x82\x61\x43\x64\xed\x31\xc3\x43\x08\xd8\x66\x7e\x5c\x2d\x32\xc8\xd1\x7f\x4e\x6b\x7d\x01\xe5\x59\x5e\x75\x55\x98\x90\x70\x32\x14\x0b\x6b\x60\x98\x4c\xce\xc0\x27\xe8\x30\xc1\x18\x74\xac\x39\x24\x40\xd7\x32\x87\x8f\x81\x36\x32\x87\x48\x15\xa7\x95\x52\xbf\xd0\xba\xb2\x61\x98\x6b\x0d\x75\x68\xc1\xed\x8b\x53\x59\x3d\xd4\x1c\xc1\x5f\x9d\x4c\x8d\x87\x94\x47\x64\xd1\x72\xf6\xad\x7e\x38\x3d\x67\x04\xcb\x6b\x11\xaf\xa2\x0d\x91\xc6\xfa\x04\x86\x5d\xa2\x6b\x27\x02\x05\x21\xa8\x70\x63\xb6\xcc\x12\x0a\x85\x84\x56\x4f\xae\x24\x29\xa4\xc9\x55\x34\xe6\xc5\x64\x03\xf6\x36\x2a\xb0\xeb\xdc\x5b\xf3\x1e\xe7\xbf\x7e\xb4\x4f\x6f\x76\xd6\x68\xbf\x2d\x72\x98\x5f\x52\xa3\xe2\xea\x52\x3e\x12\x2b\x47\x22\xaa\x32\x86\x97\x27\x30\xaf\x89\x75\xb7\x60\xea\xc2\x20\x20\x3c\x86\x82\xb8\x23\x0c\xd6\x0a\xf1\x6a\x5d\x4f\x29\x45\x2f\x6a\x2d\xa5\xb1\x2e\x36\xe1\x4b\x3a\xeb\x6f\x37\xd6\xe5\x60\xd0\x43\x17\x30\xf8\x29\x53\xaf\xeb\x2b\xb3\x70\xea\x73\x13\x18\x4d\x25\x09\x71\xf6\x44\xe8\xb6\x04\x5a\xe5\x61\x48\xcc\x46\xaa\xac\x44\x28\x80\x3d\x2c\x78\xdc\xb6\xa5\x62\x51\xab\x88\xa0\xb2\x22\xe0\x66\x99\xd0\x3a\x97\xb4\x23\xba\x66\x5b\xd5\x7a\xed\x4a\xd5\xb4\x6b\xdd\xce\xf1\x0c\x76\xde\xcc\x85\xaa\x56\xce\x9a\x1d\x8c\xae\x2c\x86\xf5\x31\x33\x8d\x14\xe0\x72\x75\xfe\x0b\x98\x2b\x75\xc8\xec\x0a\xe8\xd7\x38\x36\x2e\xc3\x81\xd3\x2e\x97\x45\xe0\x63\x30\x95\xd1\x0d\xd0\x87\x20\x2a\x83\xba\x26\xdb\x51\xec\xd9\x0b\x60\x98\x69\xbc\xc7\x08\xd0\x8f\x0f\x85\xed\xb0\xda\xc8\x5c\xe9\x25\x48\xb8\xd5\xb6\x58\x53\xb5\xca\xed\x9a\xc7\x6b\x12\xa6\x1e\xd0\x08\x47\x04\x3e\x05\x50\x19\xa8\x5a\x1a\xe4\x33\x49\x0a\xf9\x24\x5a\xe5\x27\xf0\x81\xb8\xa6\x62\x3d\x3f\x0f\x35\x56\xe1\xd9\xa6\xf2\x69\x45\xa5\xd4\x2b\x34\x15\x11\x7c\x8d\x12\x23\xb0\x15\x1f\x3d\x53\x77\x25\x69\xeb\xb8\xda\x59\x9b\x1c\x15\x05\xbe\x1d\x7c\xfb\xf1\x10\x14\xff\xc5\xb5\xff\x0a\x00\x00\xff\xff\x15\xa7\x1b\x04\x18\x0e\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 3608, mode: os.FileMode(420), modTime: time.Unix(1465855632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x41\x68\x45\x25\xc5\xf1\x4b\x87\xec\xc3\xec\xbc\xac\x4b\x36\x64\x43\xbb\x02\x4b\xbf\x6c\x96\x03\x30\x12\x6d\x73\xa1\x48\x8d\xa4\x9a\xb9\x75\xff\xfb\x8e\x94\x64\x93\x74\xec\xa6\x85\x63\xf9\xee\x79\xee\x8e\xc7\x87\x27\x7e\xc2\x12\xe5\xa2\xe6\x1a\x5d\xa0\xf1\xb4\x67\x7e\x4a\xf2\x6f\x4d\x94\x56\x60\x99\xcd\xa7\xbd\xde\xab\xa4\x10\x79\x5d\x12\xae\xd3\xa1\x24\xb8\x58\x27\x8b\x9a\xe7\x9a\x0a\x9e\xa4\xe8\x4b\x0f\xc1\xbf\x57\x49\xf4\xdd\x83\xe6\xd7\x8c\x60\xf9\x4e\x2c\xa3\x74\x98\x33\x9a\x3f\xee\x03\x3b\xf0\x52\x8a\xba\xba\x16\x5c\x09\x46\x00\x4d\xca\x4a\xaf\x93\x74\xea\x61\x34\x95\x24\xc7\x15\xb8\x57\xb4\x20\xa1\x77\x55\xb4\x75\x1a\xbf\x2e\x59\x12\x45\xcf\x20\x54\x05\x39\xc8\x11\x08\xb3\xd5\xfa\xde\xaf\xf0\x6d\x3e\xbd\xae\x7c\x44\x79\x2e\x89\xe9\xc0\xb5\x69\xd5\x76\x35\x92\xe8\x5a\xf2\xa6\x7f\xfd\x3e\x90\x1c\x8a\x5a\x89\xa7\x1b\xa2\x31\x65\x2a\xa1\x45\xc7\x80\x74\x9d\xb1\x6b\xf3\x8c\x16\xf3\xd4\xe7\x2e\x09\x24\x62\x42\xfe\xbc\xbe\xd3\x58\xd7\x2a\x51\xf6\xeb\x5a\x14\xc4\x04\xb2\x91\xe8\x02\x39\x66\x74\x71\x81\xbe\x1f\x8f\xd1\x66\x83\x42\xe3\x1b\xb7\xf7\x6d\xc5\x91\xaa\xf3\x9c\x28\x15\xb5\x0b\x46\x84\x29\xf2\x4c\xc8\xb3\xf1\xd9\x73\xec\x02\xf3\x25\x91\x3e\x79\x1f\xf5\x84\x25\xa7\x7c\xd9\xc1\xbc\x15\x3a\x7d\xf8\x47\x09\xde\x25\x71\xe4\x07\xea\xfb\xfd\xee\xc3\x1f\x43\xa5\x25\x04\xa1\x8b\xb5\x05\x0e\x5b\xef\x29\xaa\x79\x41\x16\x94\x93\xe2\x14\x9d\xb5\xfb\xd6\xb0\x9b\x2d\x3f\x48\x6f\xdc\x07\xf9\x50\xd8\x61\x6a\xcd\x0e\x27\x6e\x1a\x07\x5c\x2f\xcf\x70\xd7\xcf\x69\x6f\x5f\xd8\x46\x24\x9d\xb0\x7d\x0f\xd6\x5a\x26\x71\xce\xb0\x52\xf1\x29\x8a\x31\x23\x52\x23\xfb\x77\x10\xa3\xfe\x21\x85\xa4\x5e\xac\xc6\xd6\xc9\xbb\x45\xf8\xc9\xbc\x13\xe4\x36\x78\x58\x12\xbd\x12\x05\xa4\x8a\xe0\x7f\x1f\x79\xbe\x0a\xeb\x95\x13\x68\xef\x28\xaa\x35\xd7\xf8\xbf\x5b\xba\x5c\x31\xf8\xe8\x4e\xea\x69\xc0\xf1\x0f\xe7\x3e\xa9\xf1\xfb\x2c\xe7\xbc\x86\x04\x70\xa5\xcd\x41\xf2\x74\xf6\x67\x93\x7c\x4f\x67\x2f\xdc\x30\x03\xa5\x05\xc0\xc2\x19\xb0\x73\x17\x58\x13\x4d\x4b\xa3\x39\xb3\x2f\xb5\x94\x80\xfa\x08\x06\x17\xb4\xa8\x19\x7b\x67\xc5\xb5\x85\x9b\xde\x9e\x0f\xf6\xdb\xfb\xad\xd6\x4f\xdb\xe1\xb3\x9b\x1f\xed\x2a\x76\x8d\x0a\xe6\x2b\xae\x2a\xc2\x8b\x24\x3e\x67\x14\x59\x4d\x5d\x44\x0c\xe4\x31\xb0\xb0\x01\xd5\xa4\x44\xc1\xef\xa3\x2a\x03\x57\x1c\x21\xc1\xed\x90\xbf\x88\xdc\x51\x67\x68\xd4\xd4\x1e\xa7\xd3\x76\x10\x2c\x30\xcc\x87\xe8\xd2\x78\xba\x26\x80\xfb\x7c\xc4\xe8\x65\xdc\x36\x28\x1c\x07\xd6\x98\x9b\xb7\xc9\x07\x56\x00\x41\x75\x9d\x54\xb9\x14\x36\x84\xba\x11\x4f\x3c\x09\xb7\xdb\xa7\x38\x9b\x0d\x09\x7e\x83\x55\xdd\xd1\xcf\x66\x97\xc2\x0e\xc1\xe2\xcd\x61\x04\x67\x97\xc7\x8c\x42\x97\x73\x89\x7e\x18\xfb\xef\xb0\x38\x8c\x30\x59\x50\xa9\x74\x6c\xde\x91\xa5\xf8\xb4\x8d\xe4\xcf\xbd\xb0\xfe\x36\xa4\x49\x67\x8a\xca\x57\x8f\x6f\x6b\x2d\xee\x2c\x0a\x4a\xa2\xd0\xd0\x49\xbe\x22\xf9\x23\x29\xe2\xf4\x1b\x2f\xd1\x26\xf6\x47\x51\x25\xcf\x38\x61\x2b\x93\x71\x87\xb9\x25\xe6\xc0\x3c\x5b\x60\x28\x60\xa7\x87\x79\x63\x37\xf2\x85\x1e\x72\xf2\x84\x6e\xe0\xf1\xc0\x41\x70\xc0\x26\x77\x83\x34\x92\x1e\x81\xa4\xb7\xab\x48\x02\xd8\x7b\xc1\xf5\xca\xe2\xde\xec\x83\x03\xec\xaf\xa0\xa5\xbf\x60\xbb\x9b\xb0\xe8\x27\x74\x04\x7b\x2b\x6a\xa9\x1a\xe0\xe4\x08\xec\x3d\xe5\xb5\x26\x2f\x00\xde\x91\x5c\xf0\x62\xab\xca\x56\xe8\xdd\xf2\x83\x8b\x40\x30\xa6\xdc\x39\x64\x9e\x77\x13\xa8\x62\x38\x27\xc9\xe8\xf5\x68\x09\x13\xff\x35\x2e\xab\xa9\x55\x53\x6b\x3e\x6f\xcc\x4c\x7b\xd6\xcb\xc6\xba\x34\x56\xaf\x18\x3f\x66\x12\x25\x59\x56\xcf\xf0\xe0\xf3\xdb\xc1\xdf\xe3\xc1\x8f\xf3\x2f\x67\x5f\x37\x59\x36\xbb\xaf\xe7\x9b\xd9\x7d\x96\x45\xf3\xf4\x04\x20\xea\x64\x92\x5e\x6d\xb2\x87\x44\xcb\x9a\x6c\xec\xc1\xdd\x70\xe8\x73\x9a\x3d\x6c\x06\x57\x59\xd1\x4f\xae\x26\xd9\x30\x2b\x4e\xd2\x2b\x78\x9a\x91\x5f\xe6\xb3\x7e\x36\x98\x1b\x4f\x7a\x95\x9a\x52\xb6\x37\xbe\x12\xeb\x7c\xe5\x2a\xd6\x4a\x88\x99\x81\x1b\xf3\xba\x7c\x20\x32\xde\xdd\xc5\x8c\xfe\x47\xf7\xd1\x68\xa8\xcd\xa4\x6e\xa8\x2e\x77\x8b\x99\xbc\x3a\x8a\x69\xc6\x86\xcd\xf1\x48\xd6\x4e\x02\x2b\xf4\xf0\xa2\x12\x30\x9a\xf7\x7d\x48\xea\x05\x74\x5b\xc6\xae\x3d\x47\xcb\x69\x03\x3f\x08\x38\x83\x98\x3b\x91\xdd\x58\xa6\xbf\x2f\x89\x62\x70\x6e\x88\xf0\xbe\x15\x9f\xab\x0a\xf3\x6e\xbc\x9b\x69\x6b\x88\x66\x52\xdb\xd1\x6b\x63\x37\x83\xd7\xe0\x2e\x63\xe7\xae\xfb\x7f\x00\x00\x00\xff\xff\x08\xc1\x31\x2f\x05\x0c\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 3077, mode: os.FileMode(420), modTime: time.Unix(1465855632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html": tmplIndexHtml,
	"tmpl/js/script.js": tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

